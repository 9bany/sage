var searchIndex = JSON.parse('{\
"asm":{"doc":"","t":[8,0,10,10,0,0,4,13,13,13,11,11,11,11,11,0,11,11,11,11,11,0,11,11,0,11,11,11,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,17,13,17,17,17,17,17,17,17,13,4,13,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,3,11,11,11,11,11,11,11,11,11,12,12,13,13,13,13,13,13,13,13,13,4,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,13,13,13,13,13,13,8,13,13,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["CompilerTarget","asm","compile_core","compile_standard","targets","vm","Error","UndefinedLabel","Unexpected","Unmatched","borrow","borrow_mut","clone","clone_into","cmp","core","eq","fmt","from","hash","into","location","ne","partial_cmp","std","to_owned","try_from","try_into","type_id","0","0","0","1","1","1","0","Add","And","Call","CallLabel","Comment","Compare","Copy","CoreOp","CoreProgram","Dec","Div","DivRem","Else","End","Fn","GetAddress","GetChar","If","Inc","IsEqual","IsGreater","IsGreaterEqual","IsLess","IsLessEqual","IsNotEqual","Load","Move","Mul","Neg","Next","Not","Or","Pop","Prev","Push","PushLiteral","PutChar","PutLiteral","Rem","Return","Set","SetLabel","StackAllocateLiteral","Store","Sub","Swap","While","assemble","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","fmt","fmt","from","from","hash","hash","into","into","ne","ne","partial_cmp","partial_cmp","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","a","addr","b","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","size","src","src","src","src","src","src","src","src","src","src","src","src","src","src","src","src","A","Address","B","BOTTOM_OF_STACK","C","D","E","F","FP","Indirect","Location","Offset","SP","TMP","add","and","borrow","borrow_mut","clone","clone_into","cmp","copy_address_to","copy_to","dec","deref","div","eq","fmt","from","from","hash","inc","into","is_greater_or_equal_to","is_greater_than","is_less_or_equal_to","is_less_than","mul","ne","next","not","offset","or","partial_cmp","pop","prev","push","rem","restore_from","save_to","set","sub","to","to_owned","try_from","try_into","type_id","whole_int","0","0","0","1","0","Add","And","Call","CallLabel","Comment","Compare","Dec","Div","DivRem","Else","End","Fn","GetAddress","GetChar","If","Inc","IsEqual","IsGreater","IsGreaterEqual","IsLess","IsLessEqual","IsNotEqual","Move","Mul","Neg","Next","Not","Or","Pop","Prev","Push","PutChar","Rem","Return","Set","SetLabel","StandardOp","StandardProgram","Sub","Swap","While","assemble","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","fmt","fmt","from","from","hash","hash","into","into","ne","ne","partial_cmp","partial_cmp","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","a","addr","b","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","src","src","src","src","src","src","src","src","src","src","src","src","src","src","src","c","C","borrow","borrow_mut","compile_core","compile_standard","from","into","try_from","try_into","type_id","0","0","ACos","ASin","ATan","Add","Add","Alloc","Call","Comment","Constant","CoreOp","CoreOp","CoreProgram","Cos","Dec","Deref","Div","Div","Else","End","Free","Function","GetChar","GetFloat","GetInt","If","Inc","IsWhole","IsWhole","Move","Mul","Mul","PutChar","PutFloat","PutInt","Refer","Rem","Rem","Restore","Return","Save","Sin","StandardOp","StandardProgram","Sub","Sub","Swap","Tan","ToFloat","ToInt","VirtualMachineProgram","Where","While","append_core_op","append_core_op","append_core_op","append_standard_op","append_standard_op","append_standard_op","begin_else","begin_function","begin_if","begin_while","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","comment","dec","default","default","deref","end","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","getchar","hash","hash","hash","hash","inc","into","into","into","into","move_pointer","ne","ne","ne","ne","partial_cmp","partial_cmp","partial_cmp","partial_cmp","putchar","refer","restore","ret","save","set_register","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","where_is_pointer","whole_int","0","0","0","0"],"q":["asm","","","","","","asm::asm","","","","","","","","","","","","","","","","","","","","","","","asm::asm::Error","","","","","","asm::asm::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","asm::asm::core::CoreOp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","asm::asm::location","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","asm::asm::location::Location","","","","asm::asm::std","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","asm::asm::std::StandardOp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","asm::targets","asm::targets::c","","","","","","","","","","asm::vm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","asm::vm::CoreOp","","","asm::vm::StandardOp"],"d":["Implement a compiler for the given target.","Assembly Module","Compile the core variant of the machine code (must be …","Compile the standard variant of the machine code (should …","","Virtual Machine Module","An error returned by the assembly language.","","","","","","","","","Core Assembly Variant","","","","","","Assembly Memory Location","","","Standard Assembly Variant","","","","","","","","","","","","Add an integer value from a source location to a …","Logical “and” a destination with a source value.","Get a value in memory and call it as a label ID.","Call a function with a given label.","","Store the comparison of “a” and “b” in a …","Copy a number of cells from a source location to a …","A core instruction of the assembly language. These are …","A program composed of core instructions, which can be …","Decrement the integer value of a location.","Divide a destination location by a source value.","Divide a destination location by a source value. Store the …","Add an “else” clause to an “if the value is not zero…","Terminate a function declaration, a while loop, an if …","Declare a new label.","Get the address of a location, and store it in a …","Get a character from the input stream and store it in a …","Begin an “if the value is not zero” statement over a …","Increment the integer value of a location.","Perform dst = dst == src.","Perform dst = dst &gt; src.","Perform dst = dst &gt;= src.","Perform dst = dst &lt; src.","Perform dst = dst &lt;= src.","Perform dst = dst != src.","Load a number of cells from a source location onto the …","Copy a value from a source location to a destination …","Multiply a destination location by a source value.","Negate an integer.","Make this pointer point to the next cell (or the nth next …","Replace a value in memory with its boolean complement.","Logical “or” a destination with a source value.","Pop an integer from the stack and store it in a memory …","Make this pointer point to the previous cell (or the nth …","Push an integer at a memory location on the stack.","Push a list of characters (each stored in consecutive …","Put a character from a source register to the output …","Print a string to the output stream.","Store the remainder of the destination modulus the source …","Return from the current function.","Set the value of a register, or any location in memory, to …","Set the value of a register, or any location in memory, to …","Push a list of characters (each stored in consecutive …","Store a number of cells to a destination location from the …","Subtract a source integer value from a destination …","Swap the values of two locations.","Begin a “while the value is not zero” loop over a …","Assemble a program of core assembly instructions into the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The “A” general purpose register.","A fixed position in the tape (a constant address known at …","The “B” general purpose register.","The offset of the bottom of the stack.","The “C” general purpose register.","The “D” general purpose register.","The “E” general purpose register.","The “F” general purpose register.","The frame pointer register.","Use the value of a cell on the tape as an address. For …","A location in memory (on the tape of the virtual machine).","Go to a position in memory, and then move the pointer …","The stack pointer register.","A temporary register. It can be used as a trash can.","This cell += source cell.","Perform boolean and on the value of this cell and a source …","","","","","","Copy the address of this location to another location.","Store the value of this cell into another cell.","Decrement the value of this location.","Get the location of the value pointed to by this location.","This cell /= source cell.","","","Move the pointer from this location.","","","Increment the value of this location.","","This cell = this cell &gt;= source cell.","This cell = this cell &gt; source cell.","This cell = this cell &lt;= source cell.","This cell = this cell &lt; source cell.","This cell *= source cell.","","Take the pointer value of this location, and make it point ","If this cell is non-zero, then the value of this location …","Get the location offset by a constant number of cells from …","Perform boolean or on the value of this cell and a source …","","Pop the top item off the stack and store it in this …","Take the pointer value of this location, and make it point …","Push the value of this location to the stack.","This cell %= source cell.","Restore the value from this location into the virtual …","Save the value of the virtual machine’s register to this …","This cell = a constant value.","This cell -= source cell.","Move the pointer to this location.","","","","","Take the value at this location. If it is a whole number …","","","","","","Add an integer value from a source location to a …","Logical “and” a destination with a source value.","Get a value in memory and call it as a label ID.","Call a function with a given label.","","Store the comparison of “a” and “b” in a …","Decrement the integer value of a location.","Divide a destination location by a source value.","Divide a destination location by a source value. Store the …","Add an “else” clause to an “if the value is not zero…","Terminate a function declaration, a while loop, an if …","Declare a new label.","Get the address of a location, and store it in a …","Get a character from the input stream and store it in a …","Begin an “if the value is not zero” statement over a …","Increment the integer value of a location.","Perform dst = dst == src.","Perform dst = dst &gt; src.","Perform dst = dst &gt;= src.","Perform dst = dst &lt; src.","Perform dst = dst &lt;= src.","Perform dst = dst != src.","Copy a value from a source location to a destination …","Multiply a destination location by a source value.","Negate an integer.","Make this pointer point to the next cell.","Replace a value in memory with its boolean complement.","Logical “or” a destination with a source value.","Pop an integer from the stack and store it in a memory …","Make this pointer point to the previous cell.","Push an integer at a memory location on the stack.","Put a character from a source register to the output …","Store the remainder of the destination modulus the source …","Return from the current function.","Set the value of a register, or any location in memory, to …","Set the value of a register, or any location in memory, to …","A core instruction of the assembly language. These are …","","Subtract a source integer value from a destination …","Swap the values of two locations.","Begin a “while the value is not zero” loop over a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An implementation of the virtual machine for the C …","","","","","","","","","","","","","Store the inverse-cosine of the register (as a float) into …","Store the inverse-sine of the register (as a float) into …","Store the inverse-tangent of the register (as a float) …","Add the value pointed to on the tape to the register.","Add the value pointed to on the tape to the register (as …","Take the value of the register, and allocate that number …","Calls the nth function defined in the program, where n is …","","Set the register equal to a constant value.","An individual core virtual machine instruction.","Execute a core instruction.","A program of only core virtual machine instructions.","Store the cosine of the register (as a float) into the …","Decrement the register by one.","The pointer is made equal to the value pointed to on the …","Divide the register by the value pointed to on the tape.","Divide the register by the value pointed to on the tape …","Begin an “else” conditional.","End a conditional.","Free the memory pointed to by the register.","Create a new function.","Get a character from the input stream and store it in the …","Get a float from the input stream (like <code>scanf(&quot;%f&quot;, &amp;reg)</code>) …","Get an integer from the input stream (like …","Begin an “if the register is not zero” conditional.","Increment the register by one.","Make the register equal to 1 if the register is a whole …","Make the register equal to the integer 1 if the register …","Move the pointer on the tape by a number of cells.","Multiply the register by the value pointed to on the tape.","Multiply the register by the value pointed to on the tape …","Put the character value of the register to the output …","Print the register as a float to the output stream (like …","Print the register as an integer to the output stream …","The last “deref” operation is undone; the pointer is …","Store the remainder of the register and the value pointed …","Store the remainder of the register and the value pointed …","Store the value pointed to on the tape to the register.","Return from the current function.","Store the register to the value pointed to on the tape.","Store the sine of the register (as a float) into the …","An individual standard virtual machine instruction.","A program of core and standard virtual machine …","Subtract the value pointed to on the tape from the …","Subtract the value pointed to on the tape from the …","Swap the register with the value pointed to on the tape.","Store the tangent of the register (as a float) into the …","Convert the register from an integer to a float.","Convert the register from a float to an integer.","An interface to conveniently create virtual machine …","Store the value of the pointer to the register.","Begin a “while the register is not zero” loop.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,0,0,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,0,2,2,0,2,2,2,2,3,4,5,3,4,5,6,7,7,7,7,7,7,7,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,9,10,16,17,18,25,26,31,32,33,32,33,34,35,36,37,38,39,40,41,42,32,43,44,45,46,47,48,49,49,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,0,50,0,0,0,0,0,0,0,50,0,50,0,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,51,52,53,53,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,55,55,55,54,54,55,54,55,54,55,54,55,54,55,54,55,54,55,54,55,54,55,54,55,54,55,54,55,54,55,54,55,54,55,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,57,58,64,65,66,75,76,75,76,77,78,79,80,81,82,83,84,85,75,86,87,88,89,90,91,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,0,0,92,92,92,92,92,92,92,92,92,93,94,95,95,95,96,95,95,96,96,96,0,95,0,95,96,96,96,95,96,96,95,96,96,95,95,96,96,96,95,96,96,95,96,95,95,96,96,95,96,96,96,95,0,0,96,95,95,95,95,95,0,96,96,97,93,94,97,93,94,97,97,97,97,93,96,94,95,93,96,94,95,97,93,96,94,95,93,96,94,95,93,96,94,95,97,97,93,94,97,97,93,96,94,95,93,96,94,95,93,96,94,95,97,93,96,94,95,97,93,96,94,95,97,93,96,94,95,93,96,94,95,97,97,97,97,97,97,93,96,94,95,93,96,94,95,93,96,94,95,93,96,94,95,97,97,98,99,100,101],"f":[null,null,[[["coreprogram",3]],[["string",3],["result",4,["string","string"]]]],[[["standardprogram",3]],[["string",3],["result",4,["string","string"]]]],null,null,null,null,null,null,[[]],[[]],[[],["error",4]],[[]],[[["error",4]],["ordering",4]],null,[[["error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,[[["error",4]],["bool",15]],[[["error",4]],[["option",4,["ordering"]],["ordering",4]]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["result",4,["coreprogram","error"]],["coreprogram",3],["error",4]]],[[]],[[]],[[]],[[]],[[],["coreprogram",3]],[[],["coreop",4]],[[]],[[]],[[["coreprogram",3]],["ordering",4]],[[["coreop",4]],["ordering",4]],[[["coreprogram",3]],["bool",15]],[[["coreop",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["coreprogram",3]],["bool",15]],[[["coreop",4]],["bool",15]],[[["coreprogram",3]],[["option",4,["ordering"]],["ordering",4]]],[[["coreop",4]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["virtualmachineprogram",8]]],[[["virtualmachineprogram",8]]],[[]],[[]],[[],["location",4]],[[]],[[["location",4]],["ordering",4]],[[["virtualmachineprogram",8]]],[[["virtualmachineprogram",8]]],[[["virtualmachineprogram",8]]],[[]],[[["virtualmachineprogram",8]]],[[["location",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["virtualmachineprogram",8]]],[[]],[[]],[[["virtualmachineprogram",8]]],[[]],[[["virtualmachineprogram",8]]],[[["virtualmachineprogram",8]]],[[["virtualmachineprogram",8]]],[[["virtualmachineprogram",8]]],[[["virtualmachineprogram",8]]],[[["location",4]],["bool",15]],[[["virtualmachineprogram",8],["isize",15]]],[[["virtualmachineprogram",8]]],[[["isize",15]]],[[["virtualmachineprogram",8]]],[[["location",4]],[["option",4,["ordering"]],["ordering",4]]],[[["virtualmachineprogram",8]]],[[["virtualmachineprogram",8],["isize",15]]],[[["virtualmachineprogram",8]]],[[["virtualmachineprogram",8]]],[[["virtualmachineprogram",8]]],[[["virtualmachineprogram",8]]],[[["virtualmachineprogram",8],["isize",15]]],[[["virtualmachineprogram",8]]],[[["virtualmachineprogram",8]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["virtualmachineprogram",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["error",4],["result",4,["standardprogram","error"]],["standardprogram",3]]],[[]],[[]],[[]],[[]],[[],["standardprogram",3]],[[],["standardop",4]],[[]],[[]],[[["standardprogram",3]],["ordering",4]],[[["standardop",4]],["ordering",4]],[[["standardprogram",3]],["bool",15]],[[["standardop",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["standardprogram",3]],["bool",15]],[[["standardop",4]],["bool",15]],[[["standardprogram",3]],[["option",4,["ordering"]],["ordering",4]]],[[["standardop",4]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["coreprogram",3]],[["string",3],["result",4,["string","string"]]]],[[["standardprogram",3]],[["string",3],["result",4,["string","string"]]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["coreop",4]]],[[["coreop",4]]],[[["coreop",4]]],[[["standardop",4]]],[[["standardop",4]]],[[["standardop",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["coreprogram",3]],[[],["coreop",4]],[[],["standardprogram",3]],[[],["standardop",4]],[[]],[[]],[[]],[[]],[[["coreprogram",3]],["ordering",4]],[[["coreop",4]],["ordering",4]],[[["standardprogram",3]],["ordering",4]],[[["standardop",4]],["ordering",4]],[[["str",15]]],[[]],[[],["coreprogram",3]],[[],["standardprogram",3]],[[]],[[]],[[["coreprogram",3]],["bool",15]],[[["coreop",4]],["bool",15]],[[["standardprogram",3]],["bool",15]],[[["standardop",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["isize",15]]],[[["coreprogram",3]],["bool",15]],[[["coreop",4]],["bool",15]],[[["standardprogram",3]],["bool",15]],[[["standardop",4]],["bool",15]],[[["coreprogram",3]],[["option",4,["ordering"]],["ordering",4]]],[[["coreop",4]],[["option",4,["ordering"]],["ordering",4]]],[[["standardprogram",3]],[["option",4,["ordering"]],["ordering",4]]],[[["standardop",4]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[["isize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null],"p":[[8,"CompilerTarget"],[4,"Error"],[13,"UndefinedLabel"],[13,"Unmatched"],[13,"Unexpected"],[3,"CoreProgram"],[4,"CoreOp"],[13,"Comment"],[13,"Set"],[13,"SetLabel"],[13,"Call"],[13,"CallLabel"],[13,"Fn"],[13,"While"],[13,"If"],[13,"Swap"],[13,"Next"],[13,"Prev"],[13,"Inc"],[13,"Dec"],[13,"Neg"],[13,"Not"],[13,"Push"],[13,"Pop"],[13,"Load"],[13,"Store"],[13,"GetChar"],[13,"PutChar"],[13,"PutLiteral"],[13,"PushLiteral"],[13,"StackAllocateLiteral"],[13,"Compare"],[13,"GetAddress"],[13,"Move"],[13,"Add"],[13,"Sub"],[13,"Mul"],[13,"Div"],[13,"Rem"],[13,"DivRem"],[13,"And"],[13,"Or"],[13,"IsGreater"],[13,"IsGreaterEqual"],[13,"IsLess"],[13,"IsLessEqual"],[13,"IsEqual"],[13,"IsNotEqual"],[13,"Copy"],[4,"Location"],[13,"Address"],[13,"Indirect"],[13,"Offset"],[3,"StandardProgram"],[4,"StandardOp"],[13,"Comment"],[13,"Set"],[13,"SetLabel"],[13,"Call"],[13,"CallLabel"],[13,"Fn"],[13,"While"],[13,"If"],[13,"Swap"],[13,"Next"],[13,"Prev"],[13,"Inc"],[13,"Dec"],[13,"Neg"],[13,"Not"],[13,"Push"],[13,"Pop"],[13,"GetChar"],[13,"PutChar"],[13,"Compare"],[13,"GetAddress"],[13,"Move"],[13,"Add"],[13,"Sub"],[13,"Mul"],[13,"Div"],[13,"Rem"],[13,"DivRem"],[13,"And"],[13,"Or"],[13,"IsGreater"],[13,"IsGreaterEqual"],[13,"IsLess"],[13,"IsLessEqual"],[13,"IsEqual"],[13,"IsNotEqual"],[3,"C"],[3,"CoreProgram"],[3,"StandardProgram"],[4,"StandardOp"],[4,"CoreOp"],[8,"VirtualMachineProgram"],[13,"Comment"],[13,"Constant"],[13,"Move"],[13,"CoreOp"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};