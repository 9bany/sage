var searchIndex = JSON.parse('{\
"acid":{"doc":"The Acid Programming Language","t":[17,17,17,17,0,0,0,0,0,2,8,2,2,2,2,2,2,4,2,2,2,2,2,2,13,13,13,13,13,11,11,11,11,11,0,11,11,11,11,11,0,11,10,11,0,10,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,17,13,17,17,17,17,17,17,13,4,13,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,4,13,3,13,13,13,13,13,13,3,4,4,13,13,8,8,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,8,13,13,3,13,13,13,13,13,13,13,13,13,13,13,4,8,13,13,13,13,13,13,13,13,11,11,11,11,12,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,5,5,8,10,10,0,3,11,11,11,11,11,11,11,11,11,12,12,13,13,13,13,13,13,13,13,13,3,4,13,3,13,13,8,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,3,4,3,13,13,13,3,13,13,13,8,13,13,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,11,11,11,11,11,11,10,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12],"n":["LOGO","LOGO_WITH_COLOR","NULL","TAGLINE","asm","lir","parse","targets","vm","A","AssemblyProgram","B","C","CoreOp","CoreProgram","D","E","Error","F","FP","Location","SP","StandardOp","StandardProgram","UndefinedLabel","Unexpected","Unmatched","UnsupportedInstruction","VirtualMachineError","borrow","borrow_mut","clone","clone_into","comment","core","eq","fmt","from","from","into","location","ne","op","partial_cmp","std","std_op","to_owned","try_from","try_into","type_id","0","0","0","0","0","1","1","1","0","Add","And","Array","BitwiseAnd","BitwiseNand","BitwiseNot","BitwiseOr","BitwiseXor","Call","CallLabel","Comment","Compare","Copy","CoreOp","CoreProgram","Dec","Div","DivRem","Else","End","Fn","Get","GetAddress","If","Inc","Index","IsEqual","IsGreater","IsGreaterEqual","IsLess","IsLessEqual","IsNotEqual","Many","Move","Mul","Neg","Next","Not","Or","Pop","PopFrom","Prev","Push","PushTo","Put","Rem","Return","Set","SetLabel","Sub","Swap","While","assemble","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","fmt","fmt","fmt","fmt","from","from","hash","hash","into","into","ne","ne","op","partial_cmp","partial_cmp","push_string","put_string","stack_alloc_cells","stack_alloc_string","std_op","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","a","a","a","a","a","a","a","addr","b","b","b","b","b","b","b","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","offset","size","size","size","sp","sp","src","src","src","src","src","src","src","src","src","src","src","src","src","src","src","src","src","vals","A","Address","B","C","D","E","F","FP","Indirect","Location","Offset","SP","acos","add","add_float","alloc","and","asin","atan","bitwise_nand","borrow","borrow_mut","clone","clone_into","cmp","copy_address_to","copy_to","cos","dec","deref","div","div_float","eq","fmt","fmt","free","from","from","get_char","get_float","get_int","hash","inc","into","is_equal","is_greater_or_equal_to","is_greater_than","is_less_or_equal_to","is_less_than","is_not_equal","mul","mul_float","ne","next","not","offset","or","partial_cmp","pop_from","prev","push_to","put_char","put_float","put_int","rem","rem_float","restore_from","save_to","set","set_float","sin","sub","sub_float","tan","to","to_float","to_int","to_owned","to_string","try_from","try_into","type_id","whole_int","0","0","0","1","0","ACos","ASin","ATan","Add","Alloc","CoreOp","Cos","Div","Free","GetChar","GetFloat","GetInt","IsGreater","IsLess","Mul","Neg","Pow","PutChar","PutFloat","PutInt","Rem","Set","Sin","Sqrt","StandardOp","StandardProgram","Sub","Tan","ToFloat","ToInt","assemble","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","into","into","ne","ne","op","partial_cmp","partial_cmp","std_op","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","a","a","b","b","dst","dst","dst","dst","dst","dst","dst","dst","src","src","src","src","src","src","Add","And","Any","Apply","ApplyNonProc","Array","Array","Array","As","AssemblyError","Bool","Bool","Cell","Char","Char","Compile","ConstExpr","ConstExpr","CoreBuiltin","CoreBuiltin","Deref","DerefMut","DerefNonPointer","Div","Enum","Env","Error","Expr","Float","Float","GetSize","GetType","If","Index","Int","Int","InvalidAs","InvalidBinop","InvalidIndex","InvalidRefer","Let","LetConst","LetConsts","LetProc","LetProcs","LetType","LetTypes","LetVar","LetVars","Many","Member","MemberNotFound","MismatchedTypes","Mul","Never","NonIntegralConst","NonSymbol","None","None","Not","Null","Of","Or","Pointer","Proc","Proc","Procedure","RecursionDepthConst","RecursionDepthTypeEquality","Refer","Rem","Return","Simplify","SizeOfExpr","SizeOfType","StandardBuiltin","StandardBuiltin","Struct","Struct","Struct","Sub","Symbol","Symbol","SymbolNotDefined","Tuple","Tuple","Tuple","Type","TypeCheck","TypeNotDefined","Union","Union","Union","UnsizedType","VariantNotFound","When","While","add","and","app","app","args","args","as_bool","as_int","as_symbol","as_type","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_cast_to","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compile","compile","compile_expr","compile_expr","compile_expr","compile_expr","compile_expr","compile_expr","compiled","contains_symbol","default","define_args","define_const","define_proc","define_type","define_var","deref","deref_mut","div","eq","eq","eq","eq","eq","eq","eq","equals","eval","field","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_args_size","get_const","get_name","get_proc","get_size","get_size_checked","get_size_checked","get_size_checked","get_size_checked","get_size_checked","get_size_checked","get_size_checked","get_type","get_type","get_type","get_type_checked","get_type_checked","get_type_checked","get_type_checked","get_type_checked","get_type_checked","get_var","has_proc","idx","if_then","into","into","into","into","into","into","into","into","let_const","let_consts","let_proc","let_procs","let_type","let_types","let_var","let_vars","mul","name","name","ne","ne","ne","ne","ne","ne","ne","new","new_scope","not","or","proc","push_label","push_proc","refer","rem","ret","ret","simplify","simplify_checked","simplify_checked","simplify_checked","size_of","structure","sub","substitute","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","var","while_loop","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","2","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","2","expected","expr","found","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","2","2","2","2","2","2","2","3","0","0","0","0","0","0","0","0","0","1","1","1","2","parse_asm","parse_lir","parse_vm","Target","build_core","build_std","c","C","borrow","borrow_mut","build_core","build_std","from","into","try_from","try_into","type_id","0","0","ACos","ASin","ATan","Add","Add","Alloc","BitwiseNand","Call","Comment","CoreInterpreter","CoreOp","CoreOp","CoreProgram","Cos","Deref","Device","Div","Div","Else","End","Error","ExpectedCore","Free","Function","Get","GetChar","GetFloat","GetInt","If","Index","IsNonNegative","IsNonNegative","Move","Mul","Mul","Pow","Put","PutChar","PutFloat","PutInt","Refer","Rem","Rem","Restore","Return","Save","Set","Set","Sin","StandardDevice","StandardInterpreter","StandardOp","StandardProgram","Sub","Sub","Tan","TestingDevice","ToFloat","ToInt","UnsupportedInstruction","VirtualMachineProgram","Where","While","as_float","as_int","begin_else","begin_function","begin_if","begin_while","bitwise_nand","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","code","code","code","comment","default","default","default","default","default","deref","end","eq","eq","eq","eq","eq","flatten","flatten","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get","get","get","get","get_char","get_char","get_char","get_float","get_float","get_float","get_int","get_int","get_int","hash","hash","index","input","into","into","into","into","into","into","into","into","into","is_non_negative","move_pointer","ne","ne","ne","ne","ne","new","new","new","new_raw","op","op","op","output","output_str","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","put","put","put","put","put_char","put_char","put_char","put_float","put_float","put_float","put_int","put_int","put_int","refer","restore","ret","run","run","save","set_register","std_op","std_op","std_op","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","where_is_pointer","0","0","0","0","0","0","0"],"q":["acid","","","","","","","","","acid::asm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acid::asm::Error","","","","","","","","acid::asm::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acid::asm::core::CoreOp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acid::asm::location","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acid::asm::location::Location","","","","acid::asm::std","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acid::asm::std::StandardOp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acid::liracid::lir::ConstExpr","","","","","","","","","","","","","","","","","","acid::lir::Error","","","","","","","","","","","","","","","","","","","","","","","","acid::lir::Expr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","acid::lir::Type","","","","","","","","","","","","","acid::parse","","","acid::targets","","","","acid::targets::c","","","","","","","","","","acid::vmacid::vm::CoreOp","","","acid::vm::Error","","acid::vm::StandardOp",""],"d":["The UNICODE character art for the logo of the language.","The UNICODE character art for the logo of the language, …","The value of the NULL pointer constant.","The tagline for the language.","Assembly Module","LIR (Low Intermediate Representation) Module","Parsing Module","Targets Module","Virtual Machine Module","","A frontend to both the <code>CoreProgram</code> and <code>StandardProgram</code> …","","","","","","","An error generated by assembling some assembly language …","","","","","","","","","","","","","","","","","Core Assembly Variant","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Assembly Memory Location","","","","Standard Assembly Variant","","","","","","","","","","","","","","","Add an integer value from a source location to a …","Logical “and” a destination with a source value.","Store a list of values at a source location. Then, store …","","","","","","Get a value in memory and call it as a label ID.","Call a function with a given label.","","Store the comparison of “a” and “b” in a …","Copy a number of cells from a source referenced location …","A core instruction of the assembly language. These are …","A program composed of core instructions, which can be …","Decrement the integer value of a location.","Divide a destination location by a source value.","Divide a destination location by a source value. Store the …","Add an “else” clause to an “if the value is not zero…","Terminate a function declaration, a while loop, an if …","Declare a new label.","Get a value from the input device / interface and store it …","Get the address of a location, and store it in a …","Begin an “if the value is not zero” statement over a …","Increment the integer value of a location.","Get the address of a location indexed by an offset stored …","Perform dst = a == b.","Perform dst = a &gt; b.","Perform dst = a &gt;= b.","Perform dst = a &lt; b.","Perform dst = a &lt;= b.","Perform dst = a != b.","","Copy a value from a source location to a destination …","Multiply a destination location by a source value.","Negate an integer.","Make this pointer point to the next cell (or the nth next …","Replace a value in memory with its boolean complement.","Logical “or” a destination with a source value.","Pop a number of cells from the stack and store it in a …","Pop a number of cells from a specified stack and store it …","Make this pointer point to the previous cell (or the nth …","Push a number of cells starting at a memory location on …","Push a number of cells starting at a memory location onto …","Put a value from a source register to the output device / …","Store the remainder of the destination modulus the source …","Return from the current function.","Set the value of a register, or any location in memory, to …","Set the value of a register, or any location in memory, to …","Subtract a source integer value from a destination …","Swap the values of two locations.","Begin a “while the value is not zero” loop over a …","Assemble a program of core assembly instructions into the …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Put a string literal as UTF-8 to the output device.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The “A” general purpose register.","A fixed position in the tape (a constant address known at …","The “B” general purpose register.","The “C” general purpose register.","The “D” general purpose register.","The “E” general purpose register.","The “F” general purpose register.","The frame pointer register.","Use the value of a cell on the tape as an address. For …","A location in memory (on the tape of the virtual machine).","Go to a position in memory, and then move the pointer …","The stack pointer register.","","This cell += source cell.","This cell += source cell.","Read the value of this cell, allocate that number of …","Perform boolean and on the value of this cell and a source …","","","Perform bitwise-nand on this cell and a source cell.","","","","","","Copy the address of this location to another location.","Store the value of this cell into another cell.","","Decrement the value of this location.","Get the location of the value pointed to by this location.","This cell /= source cell.","This cell /= source cell.","","","","Free the pointer stored in this cell, and set the value to …","Returns the argument unchanged.","Move the pointer from this location.","","","","","Increment the value of this location.","Calls <code>U::from(self)</code>.","","dst = this cell &gt;= source cell.","dst = this cell &gt; source cell.","dst = this cell &lt;= source cell.","dst = this cell &lt; source cell.","","This cell *= source cell.","This cell *= source cell.","","Take the pointer value of this location, and make it point …","If this cell is non-zero, then the value of this location …","Get the location offset by a constant number of cells from …","Perform boolean or on the value of this cell and a source …","","Pop the top item off a given stack and store it in this …","Take the pointer value of this location, and make it point …","Push the value of this location to a given stack.","","","","This cell %= source cell.","This cell %= source cell.","Restore the value from this location into the virtual …","Save the value of the virtual machine’s register to this …","This cell = a constant value.","This cell = a constant floating point value. This requires …","","This cell -= source cell.","This cell -= source cell.","","Move the pointer to this location.","","","","","","","","Take the value at this location. If it is a whole number …","","","","","","","","","","","Execute a core instruction.","","","","","","","Perform dst = a &gt; b.","Perform dst = a &lt; b.","","","","","","","","","","","A standard instruction of the assembly language. These are …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add two expressions.","Take the logical and of two expressions.","A type reserved by the compiler. This type is equal to any …","Apply a function with some arguments.","Tried to apply a non-procedure to some arguments.","An array of constant values.","An array of expressions.","An array of a given type, with a constant size.","Cast an expression to another type.","An error caused by trying to assemble invalid code …","A constant boolean value.","The type of a boolean value.","The type of the most basic unit of memory.","A constant chararacter.","The type of a character.","A trait which allows an LIR expression to be compiled to …","A compiletime expression.","A constant expression.","A builtin pseudo-procedure implemented in the core …","A builtin implemented in handwritten core assembly.","Dereference this expression (i.e. get the value it points …","Store an expression to an address (a pointer).","Tried to dereference a non-pointer.","Divide an expression by another.","An enumeration of a list of possible named values. A …","An environment under which expressions and types are …","An LIR compilation error.","TODO: Add variants for <code>LetProc</code>, <code>LetVar</code>, etc. to support …","A constant floating point value.","The floating-point number type.","Get the size of something in memory (number of cells).","Get the type associated with a value under a given …","An if-then-else expression.","Index an array or pointer with an expression that …","A constant integer value.","The integer type.","Invalid type casting expression.","Invalid binary operation (add, subtract, and, or) …","Invalid <code>Index</code> expression (incorrect types).","Invalid <code>Refer</code> expression. The compiler was not able to …","Bind a type to a name in a temporary scope.","A <code>const</code> binding expression. Declare a constant under a new …","A <code>const</code> binding expression. Declare multiple constants …","A <code>proc</code> binding expression. Declare a procedure under a new …","A <code>proc</code> binding expression. Declare multiple procedures …","A <code>type</code> binding expression. Declare a type under a new …","A <code>type</code> binding expression. Declare multiple types under a …","A <code>let</code> binding expression. Declare a variable under a new …","A <code>let</code> binding expression. Declare multiple variables under …","A block of expressions. The last expression in the block …","Get a field or member from a structure, union, or tuple. …","Tried to access an undefined member of a tuple, struct, or …","Mismatched types","Multiply an expression by another.","The type of an expression that will never return, or doesn…","Got another type when expecting an integer, bool, or char.","Expected a symbol, but got something else.","The unit, or “void” instance.","The type of void expressions.","Take the logical not of an expression.","The null pointer constant.","A constant enum variant.","Take the logical or of two expressions.","A pointer to another type.","A procedure.","A procedure with a list of parameters and a return type.","A procedure of LIR code which can be applied to a list of …","Recursion depth exceeded when trying to evaluate a …","Recursion depth exceeded when trying to confirm a type’s …","TODO: implement comparison operators. Reference this …","Get the remainder of this expression divided by another.","Return a value from a function.","Simplify an expression while maintaining structural …","Get the size of an expression’s type (in cells) as a …","Get the size of a type (in cells) as a constant int.","A builtin pseudo-procedure implemented in the standard …","A builtin implemented in handwritten standard assembly.","A structure of constant values.","A structure of fields to expressions.","A tuple with named members. This is a product type.","Subtract an expression from another.","A named constant.","A named type.","A symbol was used, but not defined.","A tuple of constant values.","A tuple of expressions.","A heterogenous collection of types. This is a product type.","The representation of a type in the LIR type system.","A value that can be typechecked.","A type was used, but not defined.","A union of constant values.","A union: a collection of named fields. The <code>Type</code> value is …","A union of a list of possible types mapped to named …","Tried to instantiate a type that cannot be sized. This is …","The variant of an enum is not defined.","A constant, compile time if-then-else expression.","Create a while loop: while the first expression evaluates …","Add this expression to another.","Logical and this expression with another.","Apply this procedure or builtin to a list of expressions …","Apply this expression as a procedure to some arguments.","The arguments of the builtin. These will be typechecked …","The arguments of the builtin. These will be typechecked …","Try to get this constant expression as a boolean value.","Try to get this constant expression as an integer.","Try to get this constant expression as a symbol (like in …","Cast an expression as another type.","The list of assembly instructions to be pasted into the …","The list of assembly instructions to be pasted into the …","","","","","","","","","","","","","","","","","Can this type be cast to another type?","","","","","","","","","","","","","","","","","Compile the expression into an assembly program.","Compile the expression into an assembly program.","","","","","","","Has this procedure been compiled yet?","Does this type contain a symbol with the given name? This …","","Define the arguments for the current scope (if this is a …","Define a constant with a given name under this environment.","Define a procedure with a given name under this …","Define a type with a given name under this environment.","Define a variable in the current scope. This will …","Dereference this expression (i.e. get the value it points …","Dereference this expression (i.e. get the value it points …","Divide this expression by another.","","","","","","","","Are two types structurally equal?","Evaluate this constant expression at compile time, and get …","Get a field from a structure, union, or tuple.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Get a variable’s size, in cells.","Get a constant definition from this environment.","Get the mangled name of the procedure. The procedure’s …","Get a procedure definition from this environment.","Get the size of something in memory (number of cells).","Get the size of something in memory, but limit the number …","","","","","","","Get the type associated with a value under a given …","Get the type associated with a value under a given …","Get a type definition from this environment.","Get the type of a value under a given environment and check","","","","","","Get a variable’s type and its offset from the frame …","Does this environment have a procedure with the given name?","Index an array or pointer with an expression that …","Create an if-then-else statement with this expression as …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a <code>let</code> binding for a constant expression.","Create several <code>const</code> bindings at onces.","Create a <code>proc</code> binding for a procedure.","Create several <code>proc</code> bindings at onces.","Create a <code>let</code> binding for an type.","Create several <code>type</code> bindings at onces.","Create a <code>let</code> binding for an expression.","Create a <code>let</code> binding for an expression, and define …","Multiply this expression by another.","The name of the builtin. This isn’t used in compilation, …","The name of the builtin. This isn’t used in compilation, …","","","","","","","","Construct a new procedure with a given list of arguments …","Create a copy of the current environment but without any …","Logical not this expression.","Logical or this expression with another.","Construct a procedure.","Push this procedure’s label to the stack.","Push a procedure defined in the environment onto the stack.","Reference this expression (i.e. get a pointer to it).","Get the remainder of this expression divided by another.","The return value the builtin will leave on the stack after …","The return value the builtin will leave on the stack after …","Simplify an expression while maintaining structural …","Simplify an expression while maintaining structural …","","","Get the size of an expression.","Create a structure of fields to expressions.","Subtract an expression from this expression.","Substitute all occurences of a symbol with another type. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type check the expression.","","","","","","","","","","","","","","","Evaluate a variable in the current scope.","Create a while statement with this expression as the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse Core and Standard variants of assembly source code. …","Parse LIR code as an LIR expression.","Parse Core and Standard variants of virtual machine source …","Implement a compiler for the given target.","Compile the core variant of the machine code (must be …","Compile the standard variant of the machine code (should …","C Target","The type for the C target which implements the <code>Target</code> …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Store the inverse-cosine of the register (as a float) into …","Store the inverse-sine of the register (as a float) into …","Store the inverse-tangent of the register (as a float) …","Add the value pointed to on the tape to the register.","Add the value pointed to on the tape to the register (as …","Take the value of the register, and allocate that number …","Perform bitwise nand on the cell and the value pointed to …","Calls the nth function defined in the program, where n is …","A comment in the machine code (not in the compiled output).","The interpreter which runs the virtual machine program.","An individual core virtual machine instruction.","Execute a core instruction.","A program of only core virtual machine instructions.","Store the cosine of the register (as a float) into the …","The pointer is made equal to the value pointed to on the …","Create an input / output device for the virtual machine …","Divide the register by the value pointed to on the tape.","Divide the register by the value pointed to on the tape …","Begin an “else” conditional.","End a conditional.","An error generated by the virtual machine.","When the virtual machine attempts to get the program as …","Free the memory pointed to by the register.","Create a new function.","Get a value from the input interface / device and store it …","Get a character from the input stream (like <code>getchar()</code>) and …","Get a float from the input stream (like <code>scanf(&quot;%f&quot;, &amp;reg)</code>) …","Get an integer from the input stream (like …","Begin an “if the register is not zero” conditional.","Interpret the register’s value as a pointer to a cell. …","Make the register equal to 1 if the register is …","Make the register equal to the integer 1 if the register …","Move the pointer on the tape by a number of cells.","Multiply the register by the value pointed to on the tape.","Multiply the register by the value pointed to on the tape …","Store the value of the register (as a float) to the power …","Write the value of the register to the output interface / …","Print the register as a character to the output stream …","Print the register as a float to the output stream (like …","Print the register as an integer to the output stream …","The last “deref” operation is undone; the pointer is …","Store the remainder of the register and the value pointed …","Store the remainder of the register and the value pointed …","Store the value pointed to on the tape to the register.","Return from the current function.","Store the register to the value pointed to on the tape.","Set the register equal to a constant value.","Set the register equal to a constant floating point value.","Store the sine of the register (as a float) into the …","A device used for standard input and output. This simply …","The interpreter which runs the standard variant of virtual …","An individual standard virtual machine instruction.","A program of core and standard virtual machine …","Subtract the value pointed to on the tape from the …","Subtract the value pointed to on the tape from the …","Store the tangent of the register (as a float) into the …","A device used for testing the compiler. This simply keeps …","Convert the register from an integer to a float.","Convert the register from a float to an integer.","When an instruction is unsupported for a given …","An interface to conveniently create virtual machine …","Store the value of the pointer to the register.","Begin a “while the register is not zero” loop.","A function to reinterpret the bits of an integer as a …","A function to reinterpret the bits of a float as an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Flatten a core program so that all of its functions are …","Flatten a standard program so that all of its functions …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Create a new testing device with some given sample input.","","","","","","Get the output of the testing device as a string (ascii).","","","","","","","","","","","","","","","","","","","","","","Run a core program using this interpreter and its device.","Run a core program using this interpreter and its device.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,0,1,1,1,1,1,0,1,2,1,0,2,1,1,1,1,3,4,5,6,7,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,9,8,9,8,9,8,9,8,9,8,9,8,8,9,9,8,9,8,9,8,9,8,9,8,8,9,9,9,9,9,8,8,9,8,9,8,9,8,9,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,12,13,19,20,21,26,27,31,32,33,34,35,36,37,38,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,31,32,33,34,35,36,37,51,52,53,54,55,41,40,56,50,56,50,39,40,41,42,43,44,45,46,47,48,49,56,51,52,53,54,55,51,0,57,0,0,0,0,0,0,57,0,57,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,59,60,60,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,62,62,62,62,61,61,62,61,62,61,62,61,62,61,62,61,61,62,62,61,62,61,62,61,62,61,61,62,61,61,62,61,62,61,62,61,62,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,64,83,84,83,84,85,86,87,88,89,90,83,84,85,86,87,88,89,90,91,91,92,91,93,94,91,92,91,93,94,92,92,94,92,0,0,91,0,94,91,91,93,91,92,0,0,0,94,92,0,0,91,91,94,92,93,93,93,93,92,91,91,91,91,91,91,91,91,91,91,93,93,91,92,93,93,94,92,91,94,94,91,92,94,92,0,93,93,91,91,91,0,94,94,0,94,94,91,92,91,94,92,93,94,91,92,0,0,93,94,91,92,93,93,91,91,91,91,94,91,95,96,94,94,94,91,95,96,97,95,96,94,91,98,92,93,97,95,96,94,91,98,92,93,92,97,95,96,94,91,98,92,93,97,95,96,94,91,98,92,93,99,99,99,95,96,94,91,98,98,92,97,97,97,97,97,97,91,91,91,95,96,94,91,98,92,93,92,94,91,97,95,95,96,96,94,94,91,91,98,98,92,92,93,97,95,96,94,91,91,98,92,93,93,97,97,98,97,100,100,95,96,94,91,98,92,101,101,97,101,95,96,94,91,98,97,97,91,91,97,95,96,94,91,98,92,93,91,91,91,91,91,91,91,91,91,95,96,95,96,94,91,98,92,93,98,97,91,91,94,98,97,91,91,95,96,102,102,94,92,91,91,91,92,97,95,96,94,91,98,92,93,95,96,94,91,98,92,97,95,96,94,91,98,92,93,97,95,96,94,91,98,92,93,103,95,96,94,91,98,92,97,95,96,94,91,98,92,93,91,91,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,109,115,115,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,120,121,123,134,134,135,135,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,160,164,166,167,168,138,140,142,144,147,148,164,144,169,170,171,172,173,174,175,176,177,169,173,176,169,0,0,0,0,178,178,0,0,179,179,179,179,179,179,179,179,179,180,181,182,182,182,183,182,182,183,183,183,0,0,182,0,182,183,0,183,182,183,183,0,184,182,183,183,182,182,182,183,183,183,182,183,183,182,182,183,182,182,182,183,183,182,183,183,183,183,182,182,0,0,0,0,183,182,182,0,182,182,184,0,183,183,0,0,185,185,185,185,185,186,187,188,180,183,181,182,189,184,186,187,188,180,183,181,182,189,184,185,180,183,181,182,184,180,183,181,182,184,180,183,185,180,181,185,186,187,180,181,189,185,185,180,183,181,182,184,180,181,180,183,183,181,182,182,189,184,186,187,188,180,183,181,182,189,184,190,188,185,189,190,188,189,190,188,189,190,188,189,180,183,185,189,186,187,188,180,183,181,182,189,184,185,185,180,183,181,182,184,186,187,189,189,185,180,181,189,189,180,183,181,182,184,190,188,185,189,190,188,189,190,188,189,190,188,189,185,185,185,186,187,185,185,185,180,181,180,183,181,182,184,180,183,181,182,186,187,188,180,183,181,182,189,184,186,187,188,180,183,181,182,189,184,186,187,188,180,183,181,182,189,184,185,191,192,193,194,195,196,197],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["error",4]],[[["",0],["",0]]],[[["",0],["string",3]]],null,[[["",0],["error",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["error",4]]],[[]],null,[[["",0],["error",4]],["bool",0]],[[["",0],["coreop",4]]],[[["",0],["error",4]],["option",4,[["ordering",4]]]],null,[[["",0],["standardop",4]],["result",4,[["error",4]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["usize",0]],["result",4,[["coreprogram",3],["error",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["coreprogram",3]],[[["",0]],["coreop",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["coreprogram",3]],["ordering",4]],[[["",0],["coreop",4]],["ordering",4]],[[["",0],["coreprogram",3]],["bool",0]],[[["",0],["coreop",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[["",0],["coreprogram",3]],["bool",0]],[[["",0],["coreop",4]],["bool",0]],[[["",0],["coreop",4]]],[[["",0],["coreprogram",3]],["option",4,[["ordering",4]]]],[[["",0],["coreop",4]],["option",4,[["ordering",4]]]],[[]],[[]],[[["location",4],["vec",3,[["isize",0]]]]],[[["location",4]]],[[["",0],["standardop",4]],["result",4,[["error",4]]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["",0],["virtualmachineprogram",8]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["location",4]],[[["",0],["",0]]],[[["",0],["location",4]],["ordering",4]],[[["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]]],[[["",0]]],[[["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["location",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[]],[[["",0],["virtualmachineprogram",8]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["",0]]],[[["",0],["virtualmachineprogram",8]]],[[]],[[["",0],["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["location",4]],["bool",0]],[[["",0],["isize",0],["virtualmachineprogram",8]]],[[["",0],["virtualmachineprogram",8]]],[[["",0],["isize",0]]],[[["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["location",4]],["option",4,[["ordering",4]]]],[[["",0],["location",4],["virtualmachineprogram",8]]],[[["",0],["isize",0],["virtualmachineprogram",8]]],[[["",0],["location",4],["virtualmachineprogram",8]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]]],[[["",0],["virtualmachineprogram",8]]],[[["",0],["isize",0],["virtualmachineprogram",8]]],[[["",0],["f64",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["",0],["virtualmachineprogram",8]]],[[["",0],["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0],["virtualmachineprogram",8]],["result",4,[["error",4]]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["virtualmachineprogram",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["usize",0]],["result",4,[["standardprogram",3],["error",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["standardprogram",3]],[[["",0]],["standardop",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["standardprogram",3]],["bool",0]],[[["",0],["standardop",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["",0],["standardprogram",3]],["bool",0]],[[["",0],["standardop",4]],["bool",0]],[[["",0],["coreop",4]]],[[["",0],["standardprogram",3]],["option",4,[["ordering",4]]]],[[["",0],["standardop",4]],["option",4,[["ordering",4]]]],[[["",0],["standardop",4]],["result",4,[["error",4]]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["vec",3,[["expr",4]]]],["expr",4]],[[["vec",3]]],null,null,[[["env",3]],["result",4,[["bool",0],["error",4]]]],[[["env",3]],["result",4,[["i32",0],["error",4]]]],[[["env",3]],["result",4,[["string",3],["error",4]]]],[[["type",4]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["",0],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["",0]],["env",3]],[[["",0]],["corebuiltin",3]],[[["",0]],["standardbuiltin",3]],[[["",0]],["constexpr",4]],[[["",0]],["expr",4]],[[["",0]],["procedure",3]],[[["",0]],["type",4]],[[["",0]],["error",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["result",4,[["result",4,[["coreprogram",3],["standardprogram",3]]],["error",4]]]],[[],["result",4,[["result",4,[["coreprogram",3],["standardprogram",3]]],["error",4]]]],[[["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],[[["env",3],["assemblyprogram",8]],["result",4,[["error",4]]]],null,[[["",0],["str",0]],["bool",0]],[[]],[[["",0],["vec",3]],["result",4,[["usize",0],["error",4]]]],[[["",0],["constexpr",4]]],[[["",0],["procedure",3]]],[[["",0],["type",4]]],[[["",0],["type",4]],["result",4,[["isize",0],["error",4]]]],[[]],[[]],[[]],[[["",0],["corebuiltin",3]],["bool",0]],[[["",0],["standardbuiltin",3]],["bool",0]],[[["",0],["constexpr",4]],["bool",0]],[[["",0],["expr",4]],["bool",0]],[[["",0],["procedure",3]],["bool",0]],[[["",0],["type",4]],["bool",0]],[[["",0],["error",4]],["bool",0]],[[["",0],["",0],["env",3]],["result",4,[["bool",0],["error",4]]]],[[["env",3]],["result",4,[["error",4]]]],[[["constexpr",4]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["constexpr",4]]],[[]],[[]],[[]],[[["error",4]]],[[]],[[["",0]],["usize",0]],[[["",0],["str",0]],["option",4,[["constexpr",4]]]],[[["",0]],["str",0]],[[["",0],["str",0]],["option",4,[["procedure",3]]]],[[["",0],["env",3]],["result",4,[["usize",0],["error",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["usize",0],["error",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["usize",0],["error",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["usize",0],["error",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["usize",0],["error",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["usize",0],["error",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["usize",0],["error",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["usize",0],["error",4]]]],[[["",0],["env",3]],["result",4,[["type",4],["error",4]]]],[[["",0],["env",3]],["result",4,[["type",4],["error",4]]]],[[["",0],["str",0]],["option",4,[["type",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["type",4],["error",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["type",4],["error",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["type",4],["error",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["type",4],["error",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["type",4],["error",4]]]],[[["",0],["env",3],["usize",0]],["result",4,[["type",4],["error",4]]]],[[["",0],["str",0]],["option",4]],[[["",0],["str",0]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["constexpr",4]]],[[["vec",3]]],[[["procedure",3]]],[[["btreemap",3,[["str",0],["procedure",3]]]]],[[["type",4]]],[[["vec",3]]],[[["option",4,[["type",4]]]]],[[["vec",3]]],[[]],null,null,[[["",0],["corebuiltin",3]],["bool",0]],[[["",0],["standardbuiltin",3]],["bool",0]],[[["",0],["constexpr",4]],["bool",0]],[[["",0],["expr",4]],["bool",0]],[[["",0],["procedure",3]],["bool",0]],[[["",0],["type",4]],["bool",0]],[[["",0],["error",4]],["bool",0]],[[["vec",3],["type",4]]],[[["",0]]],[[]],[[]],[[["vec",3],["type",4]]],[[["",0],["assemblyprogram",8]]],[[["",0],["str",0],["assemblyprogram",8]],["result",4,[["error",4]]]],[[]],[[]],null,null,[[["env",3]],["result",4,[["error",4]]]],[[["env",3],["usize",0]],["result",4,[["error",4]]]],[[["env",3],["usize",0]],["result",4,[["error",4]]]],[[["env",3],["usize",0]],["result",4,[["error",4]]]],[[]],[[["btreemap",3,[["str",0]]]]],[[]],[[["",0],["str",0],["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0],["env",3]],["result",4,[["error",4]]]],[[["",0],["env",3]],["result",4,[["error",4]]]],[[["",0],["env",3]],["result",4,[["error",4]]]],[[["",0],["env",3]],["result",4,[["error",4]]]],[[["",0],["env",3]],["result",4,[["error",4]]]],[[["",0],["env",3]],["result",4,[["error",4]]]],[[["",0],["env",3]],["result",4,[["error",4]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4,[["result",4,[["coreprogram",3],["standardprogram",3]]],["string",3]]]],[[],["result",4,[["expr",4],["string",3]]]],[[],["result",4,[["result",4,[["coreprogram",3],["standardprogram",3]]],["string",3]]]],null,[[["",0],["coreprogram",3]],["result",4,[["string",3],["string",3]]]],[[["",0],["standardprogram",3]],["result",4,[["string",3],["string",3]]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["coreprogram",3]],["result",4,[["string",3],["string",3]]]],[[["",0],["standardprogram",3]],["result",4,[["string",3],["string",3]]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["isize",0]],["f64",0]],[[["f64",0]],["isize",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["coreprogram",3]],[[["",0]],["coreop",4]],[[["",0]],["standardprogram",3]],[[["",0]],["standardop",4]],[[["",0]],["error",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["coreprogram",3]],["ordering",4]],[[["",0],["coreop",4]],["ordering",4]],[[["",0]],["result",4,[["coreprogram",3],["standardprogram",3]]]],[[["",0]],["result",4,[["coreprogram",3],["standardprogram",3]]]],[[["",0]],["result",4,[["coreprogram",3],["standardprogram",3]]]],[[["",0],["str",0]]],[[]],[[]],[[],["coreprogram",3]],[[],["standardprogram",3]],[[],["testingdevice",3]],[[["",0]]],[[["",0]]],[[["",0],["coreprogram",3]],["bool",0]],[[["",0],["coreop",4]],["bool",0]],[[["",0],["standardprogram",3]],["bool",0]],[[["",0],["standardop",4]],["bool",0]],[[["",0],["error",4]],["bool",0]],[[]],[[]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["result",4,[["isize",0],["string",3]]]],[[["",0]],["result",4,[["isize",0],["string",3]]]],[[["",0]]],[[["",0]],["result",4,[["isize",0],["string",3]]]],[[["",0]],["result",4,[["char",0],["string",3]]]],[[["",0]],["result",4,[["char",0],["string",3]]]],[[["",0]],["result",4,[["char",0],["string",3]]]],[[["",0]],["result",4,[["f64",0],["string",3]]]],[[["",0]],["result",4,[["f64",0],["string",3]]]],[[["",0]],["result",4,[["f64",0],["string",3]]]],[[["",0]],["result",4,[["isize",0],["string",3]]]],[[["",0]],["result",4,[["isize",0],["string",3]]]],[[["",0]],["result",4,[["isize",0],["string",3]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0],["isize",0]]],[[["",0],["coreprogram",3]],["bool",0]],[[["",0],["coreop",4]],["bool",0]],[[["",0],["standardprogram",3]],["bool",0]],[[["",0],["standardop",4]],["bool",0]],[[["",0],["error",4]],["bool",0]],[[]],[[]],[[]],[[["vec",3,[["isize",0]]]]],[[["",0],["coreop",4]]],[[["",0],["coreop",4]]],[[["",0],["coreop",4]]],null,[[["",0]],["string",3]],[[["",0],["coreprogram",3]],["option",4,[["ordering",4]]]],[[["",0],["coreop",4]],["option",4,[["ordering",4]]]],[[["",0],["standardprogram",3]],["option",4,[["ordering",4]]]],[[["",0],["standardop",4]],["option",4,[["ordering",4]]]],[[["",0],["error",4]],["option",4,[["ordering",4]]]],[[["",0],["isize",0]],["result",4,[["string",3]]]],[[["",0],["isize",0]],["result",4,[["string",3]]]],[[["",0]]],[[["",0],["isize",0]],["result",4,[["string",3]]]],[[["",0],["char",0]],["result",4,[["string",3]]]],[[["",0],["char",0]],["result",4,[["string",3]]]],[[["",0],["char",0]],["result",4,[["string",3]]]],[[["",0],["f64",0]],["result",4,[["string",3]]]],[[["",0],["f64",0]],["result",4,[["string",3]]]],[[["",0],["f64",0]],["result",4,[["string",3]]]],[[["",0],["isize",0]],["result",4,[["string",3]]]],[[["",0],["isize",0]],["result",4,[["string",3]]]],[[["",0],["isize",0]],["result",4,[["string",3]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["coreprogram",3]],["result",4,[["string",3]]]],[[["standardprogram",3]],["result",4,[["string",3]]]],[[["",0]]],[[["",0],["isize",0]]],[[["",0],["standardop",4]],["result",4,[["error",4]]]],[[["",0],["standardop",4]],["result",4,[["error",4]]]],[[["",0],["standardop",4]],["result",4,[["error",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]]],null,null,null,null,null,null,null],"p":[[4,"Error"],[8,"AssemblyProgram"],[13,"VirtualMachineError"],[13,"UnsupportedInstruction"],[13,"UndefinedLabel"],[13,"Unmatched"],[13,"Unexpected"],[3,"CoreProgram"],[4,"CoreOp"],[13,"Comment"],[13,"Many"],[13,"Set"],[13,"SetLabel"],[13,"Call"],[13,"CallLabel"],[13,"Fn"],[13,"While"],[13,"If"],[13,"Swap"],[13,"Next"],[13,"Prev"],[13,"Inc"],[13,"Dec"],[13,"Neg"],[13,"Not"],[13,"Push"],[13,"Pop"],[13,"Get"],[13,"Put"],[13,"BitwiseNot"],[13,"Compare"],[13,"IsGreater"],[13,"IsGreaterEqual"],[13,"IsLess"],[13,"IsLessEqual"],[13,"IsEqual"],[13,"IsNotEqual"],[13,"GetAddress"],[13,"Move"],[13,"Copy"],[13,"Index"],[13,"Add"],[13,"Sub"],[13,"Mul"],[13,"Div"],[13,"Rem"],[13,"DivRem"],[13,"And"],[13,"Or"],[13,"PopFrom"],[13,"Array"],[13,"BitwiseNand"],[13,"BitwiseXor"],[13,"BitwiseOr"],[13,"BitwiseAnd"],[13,"PushTo"],[4,"Location"],[13,"Address"],[13,"Indirect"],[13,"Offset"],[3,"StandardProgram"],[4,"StandardOp"],[13,"CoreOp"],[13,"Set"],[13,"ToFloat"],[13,"ToInt"],[13,"Sqrt"],[13,"Neg"],[13,"Sin"],[13,"Cos"],[13,"Tan"],[13,"ASin"],[13,"ACos"],[13,"ATan"],[13,"Alloc"],[13,"Free"],[13,"PutChar"],[13,"GetChar"],[13,"PutInt"],[13,"GetInt"],[13,"PutFloat"],[13,"GetFloat"],[13,"IsGreater"],[13,"IsLess"],[13,"Pow"],[13,"Add"],[13,"Sub"],[13,"Mul"],[13,"Div"],[13,"Rem"],[4,"Expr"],[4,"Type"],[4,"Error"],[4,"ConstExpr"],[3,"CoreBuiltin"],[3,"StandardBuiltin"],[3,"Env"],[3,"Procedure"],[8,"Compile"],[8,"GetSize"],[8,"GetType"],[8,"Simplify"],[8,"TypeCheck"],[13,"Symbol"],[13,"Int"],[13,"Float"],[13,"Char"],[13,"Bool"],[13,"Of"],[13,"SizeOfType"],[13,"SizeOfExpr"],[13,"Tuple"],[13,"Array"],[13,"Struct"],[13,"Union"],[13,"CoreBuiltin"],[13,"StandardBuiltin"],[13,"Proc"],[13,"AssemblyError"],[13,"VariantNotFound"],[13,"MemberNotFound"],[13,"RecursionDepthConst"],[13,"RecursionDepthTypeEquality"],[13,"NonIntegralConst"],[13,"UnsizedType"],[13,"DerefNonPointer"],[13,"ApplyNonProc"],[13,"NonSymbol"],[13,"InvalidIndex"],[13,"InvalidRefer"],[13,"InvalidBinop"],[13,"SymbolNotDefined"],[13,"TypeNotDefined"],[13,"InvalidAs"],[13,"MismatchedTypes"],[13,"ConstExpr"],[13,"Many"],[13,"LetConst"],[13,"LetConsts"],[13,"LetProc"],[13,"LetProcs"],[13,"LetType"],[13,"LetTypes"],[13,"LetVar"],[13,"LetVars"],[13,"While"],[13,"If"],[13,"When"],[13,"Add"],[13,"Sub"],[13,"Mul"],[13,"Div"],[13,"Rem"],[13,"And"],[13,"Or"],[13,"Not"],[13,"Refer"],[13,"Deref"],[13,"DerefMut"],[13,"Apply"],[13,"Return"],[13,"Array"],[13,"Tuple"],[13,"Union"],[13,"Struct"],[13,"As"],[13,"Member"],[13,"Index"],[13,"Let"],[13,"Symbol"],[13,"Enum"],[13,"Tuple"],[13,"Array"],[13,"Struct"],[13,"Union"],[13,"Proc"],[13,"Pointer"],[8,"Target"],[3,"C"],[3,"CoreProgram"],[3,"StandardProgram"],[4,"StandardOp"],[4,"CoreOp"],[4,"Error"],[8,"VirtualMachineProgram"],[3,"CoreInterpreter"],[3,"StandardInterpreter"],[3,"StandardDevice"],[3,"TestingDevice"],[8,"Device"],[13,"Comment"],[13,"Set"],[13,"Move"],[13,"UnsupportedInstruction"],[13,"ExpectedCore"],[13,"CoreOp"],[13,"Set"]]},\
"lsd":{"doc":"LSD - The Acid Compiler","t":[3,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,4,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,5,12,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12,12,12,12,12],"n":["Args","AsmError","BuildError","C","CoreASM","CoreASM","CoreVM","CoreVM","Error","IO","InterpreterError","InvalidSource","LirError","LowIR","Parse","Run","SourceType","StdASM","StdASM","StdVM","StdVM","TargetType","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_stack_size","clone","clone","clone_into","clone_into","compile","compile_source_to_asm","compile_source_to_vm","fmt","fmt","fmt","fmt","from","from","from","from","from_arg_matches","from_arg_matches_mut","input","into","into","into","into","into_app","into_app_for_update","main","output","read_file","source_type","target_type","to_owned","to_owned","to_possible_value","to_possible_value","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","value_variants","value_variants","write_file","0","0","0","0","0","0","0"],"q":["lsd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lsd::Error","","","","","",""],"d":["The argument parser for the CLI.","Error generated when assembling input code.","Error when building the virtual machine code for a given …","Compile to C source code (GCC only).","Compile to the core variant of the assembly language.","Compile core variant assembly code.","Compile to the core variant of the virtual machine.","Compile core variant virtual machine code.","The types of errors returned by the CLI.","Error in reading source or writing generated code.","Error generated by the interpreter executing input code.","Invalid source code (expected core but got standard).","Error generated when compiling LIR code.","Compile LIR code.","Error parsing the source code.","Execute the source code in the interpreter.","The source language options to compile.","Compile to the standard variant of the assembly language.","Compile standard variant assembly code.","Compile to the standard variant of the virtual machine.","Compile standard variant virtual machine code.","The target options to compile the given source code to.","","","","","","","","","","","The number of cells allocated for the call stack.","","","","","Compile code in a given source language to a given target …","Compile code in a given source language to assembly code.","Compile a given source language to virtual machine code.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","The input file to compiler.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","The file to write the output of the compiler to.","Read the contents of a file.","The source language to compile.","The target language to compile to.","","","","","","","","","","","","","","","","","","","","","Write some contents to a file.","","","","","","",""],"i":[0,1,1,2,2,3,2,3,0,1,1,1,1,3,1,2,0,2,3,2,3,0,4,4,1,2,3,4,1,2,3,4,4,2,3,2,3,0,0,0,1,2,3,4,1,2,3,4,4,4,4,1,2,3,4,4,4,0,4,0,4,4,2,3,2,3,1,2,3,4,1,2,3,4,1,2,3,4,4,4,2,3,0,5,6,7,8,9,10,11],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["targettype",4]],[[["",0]],["sourcetype",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["string",3],["sourcetype",4],["targettype",4],["string",3],["usize",0]],["result",6,[["error",4]]]],[[["string",3],["sourcetype",4]],["result",6,[["result",6,[["coreprogram",3],["standardprogram",3]]],["error",4]]]],[[["string",3],["sourcetype",4],["usize",0]],["result",6,[["result",6,[["coreprogram",3],["standardprogram",3]]],["error",4]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],null,[[]],[[]],[[]],[[]],[[],["command",6]],[[],["command",6]],[[],["result",6,[["error",4]]]],null,[[["str",0]],["result",6,[["string",3],["error",4]]]],null,null,[[["",0]]],[[["",0]]],[[["",0]],["option",4,[["possiblevalue",3]]]],[[["",0]],["option",4,[["possiblevalue",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]],[[]],[[["string",3],["string",3]],["result",6,[["error",4]]]],null,null,null,null,null,null,null],"p":[[4,"Error"],[4,"TargetType"],[4,"SourceType"],[3,"Args"],[13,"IO"],[13,"Parse"],[13,"LirError"],[13,"AsmError"],[13,"InterpreterError"],[13,"BuildError"],[13,"InvalidSource"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};