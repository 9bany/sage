var searchIndex = JSON.parse('{\
"sage":{"doc":"The Sage Programming Language","t":"RRRAAAAAAACICCCCCCECCCCCCCCCNNNNNNLLLLLAKLLLLLKALKALKLAKLLLLLNNNNNNNNNNNNNNEDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDLLLLLLLLLLLLLLLLLLLLLRNRRRRRRRNNENRRLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNNNNEDNNNNLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMFDNNDNNNNNNNNNENNNNNNDININDDDDDDNNNNNNEINENNDNNDNDNNNNNNNNNDNEEDNNNDIINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENDNNDNNNNNDNNNDENNNNDNNNDENNNNNSINNNDNNNNNNNNNNDINNNNNEINNNINNNNNNNNNNNNNLLLLLLMMLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKKKKLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMDLLLLMLMLLLLMMMFFFFLLLLAADLLLLLLLLLLLMLMLMLLLLLLNNNNENNNNNNNNNNDNNENNNNNNNNNNENNNNNNNNDENNNNNNNNNNNNNNDENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIILLLLAKKKLKKKKLLLLLKKKKKKADLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNDENDNNINNNNENNNNNNNNNNNNNNNNNNNNNNNNDDEDNNNDNNNINNLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLMKLLLMLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLMLLLLLLLLLLLLLLLKLLMLLLLLLLKLLLKLLLKLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["LOGO","LOGO_WITH_COLOR","NULL","asm","frontend","lir","parse","side_effects","targets","vm","A","AssemblyProgram","B","C","CoreOp","CoreProgram","D","E","Error","F","FP","GP","Globals","Location","REGISTERS","SP","StandardOp","StandardProgram","UndefinedGlobal","UndefinedLabel","Unexpected","Unmatched","UnsupportedInstruction","VirtualMachineError","borrow","borrow_mut","clone","clone_into","comment","core","current_instruction","eq","fmt","fmt","from","from","get_op","globals","into","is_defined","location","log_instructions_after","op","partial_cmp","std","std_op","to_owned","to_string","try_from","try_into","type_id","Add","And","Array","BitwiseAnd","BitwiseNand","BitwiseNor","BitwiseNot","BitwiseOr","BitwiseXor","Call","CallLabel","Comment","Compare","Copy","CoreOp","CoreProgram","Dec","Div","DivRem","Else","End","Fn","Get","GetAddress","Global","If","Inc","Index","IsEqual","IsGreater","IsGreaterEqual","IsLess","IsLessEqual","IsNotEqual","Many","Move","Mul","Neg","Next","Not","Or","Pop","PopFrom","Prev","Push","PushTo","Put","Rem","Return","Set","SetLabel","Sub","Swap","While","assemble","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","code","current_instruction","default","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","get_op","hash","hash","into","into","is_defined","new","op","partial_cmp","partial_cmp","push_string","put_string","stack_alloc_string","std_op","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","a","a","a","a","a","a","a","addr","b","b","b","b","b","b","b","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","dst","name","offset","size","size","size","size","sp","sp","src","src","src","src","src","src","src","src","src","src","src","src","src","src","src","src","src","src","vals","Globals","add_global","borrow","borrow_mut","clone","clone_into","default","fmt","fmt","from","get_global","get_global_location","get_global_size","get_size","into","new","resolve","to_owned","to_string","try_from","try_into","type_id","A","Address","B","C","D","E","F","FP","GP","Global","Indirect","Location","Offset","REGISTERS","SP","borrow","borrow_mut","clone","clone_into","cmp","deref","eq","equivalent","fmt","fmt","from","hash","into","offset","partial_cmp","to_owned","to_string","try_from","try_into","type_id","ACos","ASin","ATan","Add","Alloc","Call","CoreOp","Cos","Div","Free","IsGreater","IsLess","Mul","Neg","Pow","Rem","Set","Sin","Sqrt","StandardOp","StandardProgram","Sub","Tan","ToFloat","ToInt","assemble","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","code","current_instruction","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from","get_op","into","into","is_defined","new","op","partial_cmp","partial_cmp","std_op","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","a","a","b","b","dst","dst","dst","dst","dst","dst","dst","dst","src","src","src","src","src","src","parse","Add","Add","Alt","And","AnnotatedWithSource","AnnotatedWithSource","AnnotatedWithSource","Any","Any","Apply","Apply","ApplyNonProc","ApplyNonTemplate","Arithmetic","Array","Array","Array","As","As","AssemblyError","Assign","AssignOp","AssignOp","BinaryOp","BinaryOp","BitwiseAnd","BitwiseNand","BitwiseNor","BitwiseNot","BitwiseOr","BitwiseXor","Bool","Bool","Cell","Cell","Char","Char","Comparison","Compile","CompilePolyProc","ConstExpr","ConstExpr","ConstExpr","CoreBuiltin","CoreBuiltin","CouldntSimplify","Data","Debug","Delete","Deref","DerefMut","DerefNonPointer","Display","Divide","Enum","EnumUnion","EnumUnion","EnumUnion","Env","Equal","Error","Expr","FFIProcedure","FFIProcedure","Float","Float","Get","GetSize","GetType","GreaterThan","GreaterThanOrEqual","If","IfLet","Immutable","Index","Int","Int","InvalidAs","InvalidAssignOp","InvalidAssignOpTypes","InvalidBinaryOp","InvalidBinaryOpTypes","InvalidConstExpr","InvalidIndex","InvalidMatchExpr","InvalidMonomorphize","InvalidPatternForExpr","InvalidPatternForType","InvalidRefer","InvalidTemplateArgs","InvalidTernaryOp","InvalidTernaryOpTypes","InvalidUnaryOp","InvalidUnaryOpTypes","LessThan","LessThanOrEqual","Let","LetConst","LetConsts","LetProc","LetProcs","LetStaticVar","LetStaticVars","LetType","LetTypes","LetTypes","LetVar","LetVars","Many","Match","Member","MemberNotFound","MismatchedMutability","MismatchedTypes","Monomorphize","Multiply","Mutability","Mutable","Negate","NegativeArrayLength","Never","New","NonExhaustivePatterns","NonIntegralConst","NonSymbol","None","None","Not","NotEqual","Null","Of","Or","Pattern","Pointer","Pointer","Poly","PolyProc","PolyProcedure","Power","Proc","Proc","Procedure","Put","RecursionDepthConst","RecursionDepthTypeEquality","Refer","Remainder","Return","SIMPLIFY_RECURSION_LIMIT","Simplify","SizeOfExpr","SizeOfTemplate","SizeOfType","StandardBuiltin","StandardBuiltin","Struct","Struct","Struct","Struct","Subtract","Symbol","Symbol","Symbol","SymbolNotDefined","Tag","TernaryOp","TernaryOp","Tuple","Tuple","Tuple","Tuple","Type","TypeCheck","TypeNotDefined","TypeOf","TypeRedefined","UnaryOp","UnaryOp","Union","Union","Union","Unit","UnsizedType","UnsupportedOperation","UnusedExpr","Variant","VariantNotFound","When","While","Wildcard","add","alt","and","app","app","are_patterns_exhaustive","args","args","as_bool","as_float","as_int","as_symbol","as_type","as_type","assign","assign_op","bitand","bitnand","bitnor","bitnot","bitor","bitxor","body","body","bool","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply","can_apply_exprs","can_apply_exprs","can_apply_exprs","can_apply_exprs","can_apply_exprs","can_apply_exprs","can_apply_exprs","can_apply_exprs","can_cast_to","can_decay_to","can_decay_to","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","compile","compile","compile","compile","compile","compile","compile","compile","compile","compile","compile","compile","compile_expr","compile_expr","compile_expr","compile_expr","compile_expr","compile_expr","compile_expr","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compile_types","compiled","contains_symbol","debug","default","default","define_types","define_var","deref","deref_mut","display","display","display","display","display","display","display","display","display","div","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equals","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","eval","eval","eval","eval","eval","eval","eval","eval","eval","eval","eval","eval","eval","eval","eval","eval","eval","eval","eval","eval","eval","eval","eval","eval","field","float","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","ge","get_bindings","get_branch_result_type","get_common_name","get_mangled_name","get_name","get_size","get_size","get_size_checked","get_size_checked","get_size_checked","get_size_checked","get_size_checked","get_size_checked","get_size_checked","get_size_checked","get_size_checked","get_type","get_type","get_type_checked","get_type_checked","get_type_checked","get_type_checked","get_type_checked","get_type_checked","get_type_checked","get_type_checked","gt","has_element_type","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","idx","if_let_pattern","if_then","int","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_atomic","is_constant","is_mutable","is_simple","le","let_bind","let_const","let_consts","let_proc","let_procs","let_type","let_types","let_var","let_vars","lt","match_pattern","monomorphize","mul","name","name","neg","neq","new","new","new","new","not","or","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","perform_template_applications","pointer","pow","proc","push_label","refer","rem","ret","ret","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","return_type","set_common_name","simplify","simplify_checked","simplify_checked","simplify_checked","simplify_until_concrete","simplify_until_has_members","simplify_until_has_variants","simplify_until_matches","simplify_until_poly","simplify_until_type_checks","simplify_until_union","size_of","struct_","structure","sub","substitute","substitute","substitute","substitute","substitute","substitute","substitute","substitute","substitute","substitute_types","substitute_types","sym","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tup","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_check","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unop","var","variant_index","while_loop","wildcard","with_loc","with_loc","with_loc","expr","loc","err","expected","expected","expr","expr","expr","found","found","loc","patterns","expr","loc","SourceCodeLocation","borrow","borrow_mut","clone","clone_into","column","eq","filename","fmt","from","get_code","into","length","line","offset","parse_asm","parse_frontend","parse_lir","parse_vm","to_owned","try_from","try_into","type_id","ffi","io","FFIBinding","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","fmt","fmt","from","hash","input_cells","into","name","new","output_cells","partial_cmp","to_owned","to_string","try_from","try_into","type_id","Accelerometer","Altimeter","AnalogPin","AnalogPin","Axis","Barometer","Bell","Black","Blower","Blue","BlueLight","Brightness","Brightness","Button","Buzzer","Channel","ClearDisplay","Clock","Color","Compass","ConductivitySensor","Cooler","Custom","Custom","Cyan","DPad","DepthSensor","DigitalPin","DigitalPin","Direction","Down","Fan","FlowSensor","Green","GreenLight","Gyroscope","Heater","Humidity","Input","InputMode","JoyStick","Keyboard","Left","Magenta","Magnetometer","Microphone","MotorSpeed","MoveCursorDown","MoveCursorLeft","MoveCursorRight","MoveCursorUp","Note","Odometer","Orange","Output","OutputMode","PHSensor","Position","Pressure","PressureGauge","PrinterChar","PrinterFloat","PrinterInt","Proximity","Pump","RGB","RainGauge","Random","Red","RedLight","Right","Servo","SetCursorChar","SetCursorColumn","SetCursorPixel","SetCursorRow","Solenoid","SpeakerFrequency","SpeakerVolume","Speedometer","StderrChar","StderrFloat","StderrInt","StdinChar","StdinFloat","StdinInt","StdoutChar","StdoutFloat","StdoutInt","StepperMotor","Temperature","Thermometer","UVSensor","Up","UpdateDisplay","Valve","VolumeSensor","WeightSensor","White","WindDirection","WindSpeed","X","Y","Yellow","Z","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","channel","clock","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","mode","mode","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","random","stderr_char","stderr_float","stderr_int","stdin_char","stdin_float","stdin_int","stdout_char","stdout_float","stdout_int","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Architecture","CompiledTarget","build_core","build_op","build_std","build_std_op","c","declare_proc","end","get","indentation","name","op","peek","poke","post_funs","postlude","postop","pre_funs","prelude","put","std_op","supports_floats","supports_input","supports_output","version","x86","C","borrow","borrow_mut","declare_proc","default","end","from","get","into","name","op","peek","poke","post_funs","postlude","postop","prelude","put","std_op","supports_floats","supports_input","supports_output","try_from","try_into","type_id","version","X86","borrow","borrow_mut","declare_proc","default","end","from","get","into","name","op","peek","poke","post_funs","postlude","postop","prelude","put","std_op","supports_floats","supports_input","supports_output","try_from","try_into","type_id","version","ACos","ASin","ATan","Add","Add","Alloc","BitwiseNand","Call","Call","Comment","CoreInterpreter","CoreOp","CoreOp","CoreProgram","Cos","Deref","Device","Div","Div","Else","End","Error","ExpectedCore","Free","Function","Get","If","Index","IsNonNegative","IsNonNegative","Move","Mul","Mul","Peek","Poke","Pow","Put","Refer","Rem","Rem","Restore","Return","Save","Set","Set","Sin","StandardDevice","StandardInterpreter","StandardOp","StandardProgram","Sub","Sub","Tan","TestingDevice","ToFloat","ToInt","UnsupportedInstruction","VirtualMachineProgram","Where","While","add_binding","as_float","as_int","begin_else","begin_function","begin_if","begin_while","bitwise_nand","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","code","code","code","comment","default","default","default","default","default","default","deref","end","eq","eq","eq","eq","eq","equivalent","equivalent","ffi","ffi_call","ffi_call","ffi_call","ffi_call","ffi_channel","flatten","flatten","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get","get","get","get","get_functions","get_functions","get_main","get_main","get_main_and_functions","get_main_and_functions","hash","hash","index","input","into","into","into","into","into","into","into","into","into","is_non_negative","move_pointer","new","new","new","new_raw","op","op","op","output","output_str","output_vals","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","peek","peek","peek","peek","poke","poke","poke","poke","put","put","put","put","refer","restore","ret","run","run","save","set_register","std_op","std_op","std_op","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","where_is_pointer"],"q":[[0,"sage"],[10,"sage::asm"],[61,"sage::asm::core"],[163,"sage::asm::core::CoreOp"],[231,"sage::asm::globals"],[253,"sage::asm::location"],[288,"sage::asm::std"],[353,"sage::asm::std::StandardOp"],[371,"sage::frontend"],[372,"sage::lir"],[1417,"sage::lir::ConstExpr"],[1419,"sage::lir::Error"],[1429,"sage::lir::Expr"],[1431,"sage::parse"],[1454,"sage::side_effects"],[1456,"sage::side_effects::ffi"],[1479,"sage::side_effects::io"],[1745,"sage::targets"],[1772,"sage::targets::c"],[1798,"sage::targets::x86"],[1824,"sage::vm"]],"d":["The UNICODE character art for the logo of the language.","The UNICODE character art for the logo of the language, …","The value of the NULL pointer constant.","Assembly Module","","LIR (Low Intermediate Representation) Module","Parsing Module","","Targets Module","Virtual Machine Module","","A frontend to both the <code>CoreProgram</code> and <code>StandardProgram</code> …","","","","","","","An error generated by assembling some assembly language …","","","","","","","","","","The given global was not defined.","The given label was not defined.","The given instruction was not expected, or cannot be used …","The given instruction did not have a matching “end”. …","Is this standard assembly operation supported by the …","An error generated by the virtual machine.","","","","","Insert a comment into the program.","Core Assembly Variant","Get the current instruction number.","","","","","Returns the argument unchanged.","Get the operation at the given instruction number.","","Calls <code>U::from(self)</code>.","Is the given label defined yet in the operations? I.E., …","Assembly Memory Location","Log all the instructions after the given instruction …","Insert a core operation into the program.","","Standard Assembly Variant","Attempt to insert a standard operation into the program. …","","","","","","Add an integer value from a source location to a …","Logical “and” a destination with a source value.","Store a list of values at a source location. Then, store …","","","","","","","Get a value in memory and call it as a label ID.","Call a function with a given label.","","Store the comparison of “a” and “b” in a …","Copy a number of cells from a source referenced location …","A core instruction of the assembly language. These are …","An assembly program composed of core instructions, which …","Decrement the integer value of a location.","Divide a destination location by a source value.","Divide a destination location by a source value. Store the …","Add an “else” clause to an “if the value is not zero…","Terminate a function declaration, a while loop, an if …","Declare a new label.","Get a value from the input device / interface and store it …","Get the address of a location, and store it in a …","Declare a global variable.","Begin an “if the value is not zero” statement over a …","Increment the integer value of a location.","Get the address of a location indexed by an offset stored …","Perform dst = a == b.","Perform dst = a &gt; b.","Perform dst = a &gt;= b.","Perform dst = a &lt; b.","Perform dst = a &lt;= b.","Perform dst = a != b.","Many instructions to execute; conveniently grouped …","Copy a value from a source location to a destination …","Multiply a destination location by a source value.","Negate an integer.","Make this pointer point to the next cell (or the nth next …","Replace a value in memory with its boolean complement.","Logical “or” a destination with a source value.","Pop a number of cells from the stack and store it in a …","Pop a number of cells from a specified stack and store it …","Make this pointer point to the previous cell (or the nth …","Push a number of cells starting at a memory location on …","Push a number of cells starting at a memory location onto …","Put a value from a source register to the output device / …","Store the remainder of the destination modulus the source …","Return from the current function.","Set the value of a register, or any location in memory, to …","Set the value of a register, or any location in memory, to …","Subtract a source integer value from a destination …","Swap the values of two locations.","Begin a “while the value is not zero” loop over a …","Assemble a program of core assembly instructions into the …","","","","","","","","","","","The list of core assembly instructions in the program.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new program of core assembly instructions.","","","","Push a string literal as UTF-8 to the stack.","Put a string literal as UTF-8 to the output device.","Allocate a string on the stack, and store its address in a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A lookup for all the global variables in an assembly …","Add a global variable to the list of globals.","","","","","Create a new empty <code>Globals</code> lookup.","","","Returns the argument unchanged.","Get the location, and size of a global variable.","Get the location of a global variable.","Get the size of a global variable. This is the number of …","Get the size of the global variables. This is the number …","Calls <code>U::from(self)</code>.","Create a new empty <code>Globals</code> lookup.","Resolve the global variables in a location to produce an …","","","","","","The “A” general purpose register.","A fixed position in the tape (a constant address known at …","The “B” general purpose register.","The “C” general purpose register.","The “D” general purpose register.","The “E” general purpose register.","The “F” general purpose register.","The frame pointer register.","The Global Pointer register. This is used to access global …","A global variable.","Use the value of a cell on the tape as an address. For …","A location in memory (on the tape of the virtual machine).","Go to a position in memory, and then move the pointer …","","The stack pointer register.","","","","","","Get the location of the value pointed to by this location.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Get the location offset by a constant number of cells from …","","","","","","","Perform inverse Cos on a cell (float) and store the result …","Perform inverse Sin on a cell (float) and store the result …","Perform inverse Tan on a cell (float) and store the result …","Add the source cell (float) to the destination cell …","Take the value in the operand cell. Allocate that number …","Call a foreign function.","Execute a core instruction.","Perform Cos on a cell (float) and store the result in the …","Divide the destination cell (float) by the source cell …","Free the memory allocated at the address stored in the …","Perform dst = a &gt; b.","Perform dst = a &lt; b.","Multiply the source cell (float) by the destination cell …","Negate the value of a cell (float) and store the result in …","Raise a cell (float) to the power of another cell (float).","Perform the modulo operation on the destination cell …","Set the value of a cell to a constant float.","Perform Sin on a cell (float) and store the result in the …","Take the square root of a cell (float).","A standard instruction of the assembly language. These are …","A program composed of standard instructions, which can be …","Subtract the source cell (float) from the destination cell …","Perform Tan on a cell (float) and store the result in the …","Take the integer value stored in a cell and store the …","Take the float value stored in a cell and store the …","Assemble the program into a virtual machine program.","","","","","","","","","The list of standard assembly instructions in the program.","Get the current instruction number.","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Get the operation at the given instruction number.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is the given label defined yet in the operations?","Create a new program of core assembly instructions.","Add a core operation to the program.","","","Add a standard operation to the program.","","","","","","","","","","","The first cell in the comparison (left hand side).","The first cell in the comparison (left hand side).","The second cell in the comparison (right hand side).","The second cell in the comparison (right hand side).","The destination cell.","The destination cell.","The destination cell.","The destination cell.","The destination cell.","The destination cell.","The destination cell.","The destination cell.","The source cell.","The source cell.","The source cell.","The source cell.","The source cell.","The source cell.","","","","","A boolean “And” operation between two values.","","An expression along with data about its source code …","","Unchecked access to a value. This is used to override …","A type reserved by the compiler. This type is equal to any …","Apply a function with some arguments.","A type that constructs a concrete type from a polymorphic …","Tried to apply a non-procedure to some arguments.","Tried to apply a non-template type to some arguments.","An arithmetic operation.","An array of constant values.","An array of expressions.","An array of a given type, with a constant size.","Cast a constant expression to another type.","Cast an expression to another type.","An error caused by trying to assemble invalid code …","An assignment operation. This is used to implement …","A trait used to implemented an assignment operation.","Perform an assignment operation on two expressions.","A trait used to implement a binary operation.","Perform a binary operation on two expressions.","A boolean “BitwiseAnd” operation between two values.","A boolean “BitwiseNand” operation between two values.","A boolean “BitwiseNor” operation between two values.","","A boolean “BitwiseOr” operation between two values.","A boolean “BitwiseXor” operation between two values.","A constant boolean value.","The type of a boolean value.","A constant integer value representing a cell on the tape.","The type of the most basic unit of memory.","A constant chararacter.","The type of a character.","A comparison operation between two values.","A trait which allows an LIR expression to be compiled to …","Tried to  compile a polymorphic procedure without …","A compiletime expression.","A constant expression.","","A builtin pseudo-procedure implemented in the core …","A builtin implemented in handwritten core assembly.","Recursion depth exceeded when trying to confirm a type’s …","Get the Union data associated with a tagged union …","","","Dereference this expression (i.e. get the value it points …","Store an expression to an address (a pointer).","Tried to dereference a non-pointer.","","","An enumeration of a list of possible named values. A …","A tagged union of constant values.","A tagged union: a typechecked union of different variants. …","An enumeration of a list of possible types. This is a sum …","An environment under which expressions and types are …","","An LIR compilation error.","TODO: Add variants for <code>LetProc</code>, <code>LetVar</code>, etc. to support …","A typed procedure which calls a foreign function. This is …","A foreign function interface binding.","A constant floating point value.","The floating-point number type.","","Get the size of something in memory (number of cells).","Get the type associated with a value under a given …","","","An if-then-else expression.","An if-let expression.","Immutable access to a value. This is the default way to …","Index an array or pointer with an expression that …","A constant integer value.","The integer type.","Invalid type casting expression.","Invalid assignment operation (assign, add_assign, …","Invalid assign op types (incorrect types).","Invalid binary operation (add, subtract, and, or) …","Invalid binary op types (incorrect types).","Invalid constant expression.","Invalid <code>Index</code> expression (incorrect types).","Tried to match over an expression that cannot be matched …","Cannot monomorphize a constant expression.","Tried to use a pattern that is not valid for the given …","Tried to use a pattern that is not valid for the given …","Invalid <code>Refer</code> expression. The compiler was not able to …","Invalid number of template arguments to a type.","Invalid ternary operation (if) expression (incorrect …","Invalid ternary op types (incorrect types).","Invalid unary operation (negate, not) expression …","Invalid unary op types (incorrect types).","","","Bind a type to a name in a temporary scope.","A <code>const</code> binding expression. Declare a constant under a new …","A <code>const</code> binding expression. Declare multiple constants …","A <code>proc</code> binding expression. Declare a procedure under a new …","A <code>proc</code> binding expression. Declare multiple procedures …","A <code>let</code> binding expression. Declare a static variable under …","A <code>let</code> binding expression. Declare multiple static …","A <code>type</code> binding expression. Declare a type under a new …","Bind a list of types in a constant expression.","A <code>type</code> binding expression. Declare multiple types under a …","A <code>let</code> binding expression. Declare a variable under a new …","A <code>let</code> binding expression. Declare multiple variables under …","A block of expressions. The last expression in the block …","A match expression.","Get a field or member from a structure, union, or tuple. …","Tried to access an undefined member of a tuple, struct, or …","Mismatched mutability","Mismatched types","Monomorphize a constant expression with some type …","","Mutability of a pointer. This is used to provide type …","Mutable access to a value.","","Tried to create an array with a negative length.","The type of an expression that will never return, or doesn…","","Invalid pattern for a match expression.","Got another type when expecting an integer, bool, or char.","Expected a symbol, but got something else.","The unit, or “void” instance.","The type of void expressions.","A boolean “Not” operation on a value.","","The null pointer constant.","A constant enum variant.","A boolean “Or” operation between two values.","A pattern which can be matched against an expression.","","A pointer to another type.","A polymorphic, parametric type. This type is used with the …","A polymorphic procedure.","A polymorphic procedure of LIR code which can be applied …","","A procedure.","A procedure with a list of parameters and a return type.","A monomorphic procedure of LIR code which can be applied …","Print a value to a given output.","Recursion depth exceeded when trying to evaluate a …","","Reference this expression (i.e. get a pointer to it).","","Return a value from a function.","This is the maximum number of times a type will be …","Simplify an expression while maintaining structural …","Get the size of an expression’s type (in cells) as a …","Tried to get the size of a template type.","Get the size of a type (in cells) as a constant int.","A builtin pseudo-procedure implemented in the standard …","A builtin implemented in handwritten standard assembly.","A structure of constant values.","A structure of fields to expressions.","","A tuple with named members. This is a product type.","","A named constant.","","A named type.","A symbol was used, but not defined.","Get the Enum value of the tag associated with a tagged …","A trait used to implement a ternary operation.","Perform a ternary operation on three expressions.","A tuple of constant values.","A tuple of expressions.","","A heterogenous collection of types. This is a product type.","The representation of a type in the LIR type system.","A trait used to enforce type checking.","A type was used, but not defined.","Get the type of an expression. (as an array of chars)","Tried to define a type that already exists.","A trait used to implement a unary operation.","Perform a unary operation on two expressions.","A union of constant values.","A union: a collection of named fields. The <code>Type</code> value is …","A union of a list of possible types mapped to named …","This type is identified by its name. Most types are …","Tried to instantiate a type that cannot be sized. This is …","Expression uses an operation unsupported by the target.","Unused expression returned a non-None value.","","The variant of an enum is not defined.","A constant, compile time if-then-else expression.","Create a while loop: while the first expression evaluates …","","Add this expression to another.","Construct a new pattern which binds to several alternate …","Logical and this expression with another.","Apply this procedure or builtin to a list of expressions …","Apply this expression as a procedure to some arguments.","This associated function returns whether or not a set of …","The arguments of the builtin. These will be typechecked …","The arguments of the builtin. These will be typechecked …","Try to get this constant expression as a boolean value.","Try to get this constant expression as a float.","Try to get this constant expression as an integer.","Try to get this constant expression as a symbol (like in …","Cast an expression as another type.","Cast an expression as another type.","Perform an AssignOp on this expression.","Perform an AssignOp on this expression.","BitwiseAnd this expression with another.","BitwiseOr this expression with another.","BitwiseAnd this expression with another.","BitwiseAnd this expression with another.","BitwiseOr this expression with another.","Bitwise this expression with another.","The list of assembly instructions to be pasted into the …","The list of assembly instructions to be pasted into the …","Construct a new pattern which matches a constant boolean.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if the operation can be applied to the given types.","Checks if the operation can be applied to the given type.","Checks if the operation can be applied to the given types.","Checks if the operation can be applied to the given types.","","","Can this binary operation be applied to the given types?","Can this binary operation be applied to the given types?","Can this binary operation be applied to the given types?","Can this binary operation be applied to the given types?","Can this binary operation be applied to the given types?","","Can this binary operation be applied to the given types?","Can this binary operation be applied to the given types?","Can this binary operation be applied to the given types?","Can this unary operation be applied to the given type?","Can this unary operation be applied to the given type?","Can this binary operation be applied to the given types?","Can this binary operation be applied to the given types?","Can this unary operation be applied to the given type?","Can this unary operation be applied to the given type?","Can this unary operation be applied to the given type?","Can this unary operation be applied to the given type?","Can this unary operation be applied to the given type?","Checks if the operation can be applied to the given …","Checks if the operation can be applied to the given …","Checks if the operation can be applied to the given …","Checks if the operation can be applied to the given …","Checks if the operation can be applied to the given …","Checks if the operation can be applied to the given …","Checks if the operation can be applied to the given …","Checks if the operation can be applied to the given …","Can this type be cast to another type?","Can a pointer of this mutability decay to a pointer of …","Can this type decay into another type?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clones the operation into a boxed trait object.","Clones the operation into a boxed trait object.","Clones the operation into a boxed trait object.","Clones the operation into a boxed trait object.","","","","Clone this operation into a trait object.","Clone this binary operation into a box.","Clone this binary operation into a box.","Clone this binary operation into a box.","","Clone this binary operation into a box.","Clone this binary operation into a box.","","Clone this operation into a box.","Clone this operation into a box.","Clone this binary operation into a box.","Clone this operation into a box.","Clone this operation into a box.","Clone this operation into a box.","Clone this operation into a box.","Clone this operation into a box.","Clone this operation into a box.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compile the expression into an assembly program.","Compile the expression into an assembly program.","Compiles the operation on the given expressions.","Compiles the operation on the given expressions.","Compiles the operation on the given expression.","Compiles the operation on the given expression.","Compiles the operation on the given expressions.","Compiles the operation on the given expressions.","Compiles the operation on the given expressions.","Compiles the operation on the given expressions.","Compiles the operation on the given expressions.","Compile the assignment operation.","","","","","","","","Compiles the operation on the given types. (Generates the …","Compiles the operation on the given type. (Generates the …","Compiles the operation on the given types. (Generates the …","Compiles the operation on the given types. (Generates the …","","","Compile the binary operation.","Compile the assignment operation.","Compile the binary operation.","Compile the binary operation.","Compile the binary operation.","","Compile the binary operation.","Compile the binary operation.","Compile the binary operation.","Compile the unary operation.","Compile the unary operation.","Compile the binary operation.","Compile the binary operation.","Compile the unary operation.","Compile the unary operation.","Compile the unary operation.","Compile the unary operation.","Compile the unary operation.","Has this procedure been compiled yet?","Does this type contain a symbol with the given name? This …","","","","Define multiple types with the given names under this …","Define a variable in the current scope. This will …","Dereference this expression (i.e. get the value it points …","Dereference this expression (i.e. get the value it points …","Formats the operation for display.","Formats the operation for display.","Formats the operation for display.","Formats the operation for display.","Formats the operation for display.","Formats the operation for display.","Formats the operation for display.","Formats the operation for display.","","Divide this expression by another.","","","","","","","Is this expression greater than another?","","","","","","","","","","","","","","","","","","","","","","","","","Are two types structurally equal?","","","","","","","","","","","","","","","","","","","Evaluates the operation on the given constant expressions.","Evaluates the operation on the given constant expression.","Evaluates the operation on the given constant expressions.","Evaluates the operation on the given constant expressions.","Evaluate this constant expression at compile time, and get …","","","Evaluate this binary operation on the given constant …","Evaluate this binary operation on the given constant …","Evaluate this binary operation on the given constant …","Evaluate this binary operation on the given constant …","Evaluate this binary operation on the given constant …","","Evaluate this binary operation on the given constant …","Evaluate this binary operation on the given constant …","Evaluate this binary operation on the given constant …","Evaluate this unary operation on the given constant values.","Evaluate this unary operation on the given constant values.","Evaluate this binary operation on the given constant …","Evaluate this binary operation on the given constant …","Evaluate this unary operation on the given constant values.","Evaluate this unary operation on the given constant values.","Evaluate this unary operation on the given constant values.","Evaluate this unary operation on the given constant values.","Evaluate this unary operation on the given constant values.","Get a field from a structure, union, or tuple.","Construct a new pattern which matches a constant float.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Is this expression greater than or equal to another?","Get the map of new variables and their types which are …","Get the type of a branch with a given expression matched …","Get the name of the procedure known to the LIR front-end.","Get the mangled name of the procedure. The procedure’s …","Get the name of this polymorphic procedure. This is not …","Get the size of something in memory (number of cells).","Get the size of something in memory (number of cells).","Get the size of something in memory, but limit the number …","","","","","","","","","Get the type associated with a value under a given …","Get the type associated with a value under a given …","Get the type of a value under a given environment and check","","","","","","","","Is this expression greater than another?","Does this type have an element type matching the supplied …","","","","","","","","","","","","","","","","","","","Index an array or pointer with an expression that …","Generate an <code>if let</code>expression, which matches a given <code>expr</code>, …","Create an if-then-else statement with this expression as …","Construct a new pattern which matches a constant integer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is this type an irreducible, atomic type?","Is this data protected against mutation?","Can this data be accessed mutably?","Is this type in a simple form? A simple form is a form …","Is this expression less than or equal to another?","Create a let-bound type.","Create a <code>let</code> binding for a constant expression.","Create several <code>const</code> bindings at onces.","Create a <code>proc</code> binding for a procedure.","Create several <code>proc</code> bindings at onces.","Create a <code>let</code> binding for an type.","Create several <code>type</code> bindings at onces.","Create a <code>let</code> binding for an expression.","Create a <code>let</code> binding for an expression, and define …","Is this expression less than another?","Generate an expression which evaluates a <code>match</code> expression, …","Take some type arguments and produce a monomorphized …","Multiply this expression by another.","The name of the builtin. This isn’t used in compilation, …","The name of the builtin. This isn’t used in compilation, …","Get the remainder of this expression divided by another.","Is this expression greater than or equal to another?","Create a new assignment operation.","Create a new FFI procedure.","Construct a new procedure with a given list of arguments …","Construct a new polymorphic procedure with type …","Logical not this expression.","Logical or this expression with another.","","","","","","","","","","","","","","","","","","","","","","Perform type applications if possible.","Construct a new pattern which matches a pointer.","Get the power of this expression to another.","Construct a procedure.","Push this procedure’s label to the stack.","Reference this expression (i.e. get a pointer to it).","Get the remainder of this expression divided by another.","The return value the builtin will leave on the stack after …","The return value the builtin will leave on the stack after …","Gets the type of the operation on the given expressions.","Gets the type of the operation on the given expressions.","Gets the type of the operation on the given expression.","Gets the type of the operation on the given expression.","Gets the type of the operation on the given expressions.","Gets the type of the operation on the given expressions.","Gets the type of the operation on the given expressions.","Gets the type of the operation on the given expressions.","","","Get the type of the result of applying this binary …","Get the type of the result of applying this binary …","Get the type of the result of applying this binary …","Get the type of the result of applying this binary …","Get the type of the result of applying this binary …","","Get the type of the result of applying this binary …","Get the type of the result of applying this binary …","Get the type of the result of applying this binary …","Get the type of the result of applying this unary …","Get the type of the result of applying this unary …","Get the type of the result of applying this binary …","Get the type of the result of applying this binary …","Get the type of the result of applying this unary …","Get the type of the result of applying this unary …","Get the type of the result of applying this unary …","Get the type of the result of applying this unary …","Get the type of the result of applying this unary …","This is just for debugging purposes. This sets the common …","Simplify an expression while maintaining structural …","Simplify an expression while maintaining structural …","","","Simplify until the type is concrete.","Simplify a type until you can get its members.","Simplify a type until you can get its variants.","Simplify an expression until it matches a given function …","Simplify until the type is a polymorphic type.","Simplify until the type passes the type checker.","Simplify a type until it’s a union.","Get the size of an expression.","Construct a new pattern which matches a struct with a …","Create a structure of fields to expressions.","Subtract an expression from this expression.","Substitute a type for a given name in the environment.","","Substitute a type in a given expression.","","","","","","Substitute all occurences of a symbol with another type. …","","","Construct a new pattern which matches a symbol with a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct a new pattern which matches a tuple of patterns.","Type check the expression.","Typechecks the operation on the given expressions.","Typechecks the operation on the given expressions.","Typechecks the operation on the given expression.","Typechecks the operation on the given expression.","Typechecks the operation on the given expressions.","Typechecks the operation on the given expressions.","Typechecks the operation on the given expressions.","Typechecks the operation on the given expressions.","","","Type-check a pattern match of an expression against this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Evaluate a variable in the current scope.","Calculate the integral value of a variant in an enum.","Create a while statement with this expression as the …","Construct a new pattern which matches any expression.","Annotate this constant expression with a source code …","With a location, annotate this expression with a source …","","","","The error that was caused by the source code.","","","","","","","","The location of the source code that caused the error. …","","","The source code location of the expression.","A struct representing a location in the source code. This …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","Parse Core and Standard variants of assembly source code. …","Parse frontend sage code into an LIR expression.","Parse LIR code as an LIR expression.","Parse Core and Standard variants of virtual machine source …","","","","","","","This is an FFI binding, which is used to call a foreign …","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Create a new FFI binding.","","","","","","","","Input from an accelerometer (in meters per second per …","Input from altitude sensor (in meters)","Electrical device input modes (These should typically be …","Electrical device output modes Set the voltage of a given …","The different axes an input or output might use.","Input from a barometer (pressure in atmospheres)","Ring a bell (in hertz)","Black","Set the pressure of a given blower (in atmospheres)","Blue","Blue light intensity (in lux)","Input from a light sensor (in lux)","Lighting device output modes Set the brightness of a given …","Input from a button (0=not pressed, 1=pressed)","Sound output modes Ring a given buzzer (in hertz)","The channel to use for a given I/O mode.","Clear the display","Physical sensor input modes (These should typically be …","The different output colors a program might use.","Input from a compass (degrees)","Input from a conductivity sensor (in siemens per meter)","Turn a cooler on or off (0=off, 1=on)","Custom output modes A custom input mode (for use with a …","Custom output modes A custom output mode (for use with a …","Cyan","User input modes (These should typically be used for games …","Input from depth sensor (in meters)","Input from a digital input (0=low, 1=high)","Set the state of a given digital output (0=low, 1=high)","The different directions a D-Pad a might use.","","Set the pressure of a given fan (in atmospheres)","Input from a flow sensor (in liters per second)","Green","Green light intensity (in lux)","Input from a gyroscope (in degrees per second) around a …","Turn a heater on or off (0=off, 1=on)","Input from a humidity sensor (in percent)","An input source for a program.","The different types of input modes a program might use.","Input from a JoyStick the degree of displacement in a …","Input from keyboard (ASCII character)","","Magenta","Input from a magnetometer (in teslas) in a given axis","Input from a microphone (frequency in hertz)","Set the speed of a given motor (in revolutions per minute)","Move the cursor down on the display","Move the cursor left on the display","Move the cursor right on the display","Move the cursor up on the display","Play a given note (in hertz)","Input from an odometer (in meters)","Orange","An output destination for a program.","The different types of output modes a program might use.","Input from a pH sensor (in pH)","Input from a position sensor in a given axis (x, y, z)","Set the pressure of a given vacuum/pressurizer …","Engineering / Science sensor input modes Input from a …","Alternative output modes for standard output Printer …","Printer (float)","Printer (integer)","Input from a distance sensor (in meters)","Set the pressure of a given pump (in atmospheres)","RGB    ","Input from a rain gauge (in millimeters)","Special input modes A random number","Red","Environment sensor input modes (These should typically be …","","Set the position of a given servo (in radians)","Write a character to the display","Set the cursor column on the display","Set the color of a given pixel on the display","Set the cursor row on the display","Set the polarity of a solenoid (0=off, 1=on)","Set the frequency of a given speaker (in hertz)","Set the volume of a given speaker (in percent)","Navigation input modes (These should typically be …","Standard error (ASCII character)","Standard error (float)","Standard error (integer)","Standard input modes (The standard interface is typically …","Standard input (float)","Standard input (integer)","Standard output modes Standard output (ASCII character)","Standard output (float)","Standard output (integer)","Robotics device output modes Set the position of a given …","Set the temperature of a given heating/cooling device …","Input from a thermometer (degrees K)","Input from a UV sensor (in watts per square meter)","","Display output modes Update the display","Set the position of a given valve (0=closed, 1=open)","Input from a volume sensor (in liters)","Input from a weight sensor (in kilograms)","White","Input from a wind direction sensor (in degrees)","Input from a wind speed sensor (in meters per second)","","","Yellow","","","","","","","","","","","","","","","","","","The channel to use for the input.","The channel to use for the output.","The time (in seconds) since the program started","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The mode of the input.","The mode of the output.","Create a new input source.","Create a new output destination.","","","","","","","","","A random number","Output to STDERR (ASCII character)","Output to STDERR (float)","Output to STDERR (integer)","Input from STDIN (ASCII character)","Input from STDIN (float)","Input from STDIN (integer)","Output to STDOUT (ASCII character)","Output to STDOUT (float)","Output to STDOUT (integer)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A trait for a target architecture to be compiled to.","Implement a compiler for the given target.","Compile the core variant of the machine code (must be …","","Compile the standard variant of the machine code (should …","","C Target","Compile the declaration of a procedure.","Compile an <code>End</code> instruction (with the matching <code>If</code> or <code>While</code> …","Get a value from the given input stream (mode + channel).","The string used for indentation.","The name of the target architecture.","Compile a <code>CoreOp</code> instruction.","Peek a value from the device connected to the program.","Poke a value to the device connected to the program.","The code after the function definitions.","The code after the program ends.","The code after each instruction.","The code before the function definitions.","The code before the program starts.","Put a value to the given output stream (mode + channel).","Compile a <code>StandardOp</code> instruction.","Whether or not the target architecture supports floating …","Whether or not the target architecture supports the given …","Whether or not the target architecture supports the given …","The version of the target architecture.","x86 Target","The type for the C target which implements the <code>Target</code> …","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","The type for the x86 target which implements the <code>Target</code> …","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Store the inverse-cosine of the register (as a float) into …","Store the inverse-sine of the register (as a float) into …","Store the inverse-tangent of the register (as a float) …","Add the value pointed to on the tape to the register.","Add the value pointed to on the tape to the register (as …","Take the value of the register, and allocate that number …","Perform bitwise nand on the cell and the value pointed to …","Calls the nth function defined in the program, where n is …","Call a foreign function interface function.","A comment in the machine code (not in the compiled output).","The interpreter which runs the virtual machine program.","An individual core virtual machine instruction.","Execute a core instruction.","A program of only core virtual machine instructions.","Store the cosine of the register (as a float) into the …","The pointer is made equal to the value pointed to on the …","Create an input / output device for the virtual machine …","Divide the register by the value pointed to on the tape.","Divide the register by the value pointed to on the tape …","Begin an “else” conditional.","End a conditional.","An error generated by the virtual machine.","When the virtual machine attempts to get the program as …","Free the memory pointed to by the register.","Create a new function.","Get a value from an input source and store it in the …","Begin an “if the register is not zero” conditional.","Interpret the register’s value as a pointer to a cell. …","Make the register equal to 1 if the register is …","Make the register equal to the integer 1 if the register …","Move the pointer on the tape by a number of cells.","Multiply the register by the value pointed to on the tape.","Multiply the register by the value pointed to on the tape …","Get a value from the input interface / device and store it …","Write the value of the register to the output interface / …","Store the value of the register (as a float) to the power …","Write the value of the register to an output source.","The last “deref” operation is undone; the pointer is …","Store the remainder of the register and the value pointed …","Store the remainder of the register and the value pointed …","Store the value pointed to on the tape to the register.","Return from the current function.","Store the register to the value pointed to on the tape.","Set the register equal to a constant value.","Set the register equal to a constant floating point value.","Store the sine of the register (as a float) into the …","A device used for standard input and output. This simply …","The interpreter which runs the standard variant of virtual …","An individual standard virtual machine instruction.","A program of core and standard virtual machine …","Subtract the value pointed to on the tape from the …","Subtract the value pointed to on the tape from the …","Store the tangent of the register (as a float) into the …","A device used for testing the compiler. This simply keeps …","Convert the register from an integer to a float.","Convert the register from a float to an integer.","When an instruction is unsupported for a given …","An interface to conveniently create virtual machine …","Store the value of the pointer to the register.","Begin a “while the register is not zero” loop.","","A function to reinterpret the bits of an integer as a …","A function to reinterpret the bits of a float as an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","FFI call to the device. This will get the FFI binding for …","","","","","Flatten a core program so that all of its functions are …","Flatten a core program so that all of its functions are …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the next input (from a given input source).","","","","Get the code for each function.","Get the code for each function.","Get the code outside of any functions.","Get the code outside of any functions.","Get the code outside of any functions, and the code for …","Get the code outside of any functions, and the code for …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Create a new testing device with some given sample input.","","","","","","Get the output of the testing device as a string (ascii).","","","","","","","Peek at the next value in the FFI buffer for the FFI …","","","","Poke a value into the FFI buffer for the FFI function …","","","","Put the given value to the given output destination.","","","","","","","Run a core program using this interpreter and its device.","Run a core program using this interpreter and its device.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,69,0,69,1,1,1,1,1,69,0,1,69,0,69,69,1,0,69,1,1,1,1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,15,15,8,15,8,15,8,15,8,15,8,15,15,15,15,8,15,8,15,15,8,8,15,8,15,15,8,15,8,15,15,15,15,8,8,8,8,15,15,8,15,8,15,8,15,8,15,8,92,93,94,95,96,97,98,99,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,92,93,94,95,96,97,98,112,113,114,115,116,117,118,102,118,101,119,111,119,111,100,101,102,103,104,105,106,107,108,109,110,119,112,113,114,115,116,117,112,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,21,0,0,0,0,0,0,0,21,21,0,21,0,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,9,9,9,9,24,24,9,24,9,24,9,24,9,24,24,24,24,9,24,24,9,9,24,24,9,24,24,9,24,24,24,24,9,24,24,9,24,9,24,9,24,9,24,9,120,121,120,121,122,123,124,125,126,127,120,121,122,123,124,125,126,127,0,0,40,28,0,29,26,33,58,31,26,31,33,33,0,29,26,31,29,26,33,0,0,26,0,26,0,0,0,0,0,0,29,31,29,31,29,31,0,0,33,0,26,28,0,29,33,0,50,0,26,26,33,50,40,31,29,26,31,0,48,0,0,0,29,29,31,0,0,0,48,48,26,26,58,26,29,31,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,48,48,31,26,26,26,26,26,26,26,29,26,26,26,26,26,26,33,33,33,29,40,0,58,0,33,31,0,33,33,33,29,31,0,48,29,29,0,0,28,31,31,29,0,40,29,31,0,0,33,33,26,40,26,31,0,29,33,29,0,29,29,26,28,31,40,29,28,31,33,0,0,26,29,26,28,31,0,0,33,29,33,0,26,29,26,31,31,33,33,33,28,33,26,26,28,26,28,26,29,26,28,59,60,29,29,29,29,29,26,26,26,26,26,26,26,26,26,59,60,28,32,29,26,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,28,59,60,61,62,63,58,31,33,32,29,26,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,28,59,60,61,62,63,58,31,33,36,64,65,66,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,36,36,64,64,65,65,66,66,31,58,31,32,29,26,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,28,59,60,61,62,63,58,31,33,36,64,65,66,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,32,29,26,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,28,59,60,61,62,63,58,31,33,36,64,65,66,38,39,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,128,128,36,36,64,64,65,65,66,66,38,41,128,29,26,59,60,61,62,36,64,65,66,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,62,31,50,32,58,32,32,26,26,36,36,64,64,65,65,66,66,50,26,36,64,65,66,29,26,26,38,39,42,43,44,45,46,47,48,49,50,51,54,55,56,57,28,59,60,61,62,63,58,31,31,38,39,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,31,36,64,65,66,29,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,26,28,32,32,29,29,26,26,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,28,28,59,59,60,60,61,61,62,62,63,63,58,58,31,31,33,33,32,29,26,26,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,28,59,60,61,62,63,58,58,31,33,33,26,28,28,62,62,63,129,129,129,29,26,59,60,61,62,63,31,130,130,130,29,26,59,60,61,62,63,26,31,38,39,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,31,26,28,26,28,32,29,26,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,28,59,60,61,62,63,58,31,33,31,58,58,31,26,31,26,26,26,26,26,26,26,26,26,28,63,26,59,60,26,26,41,61,62,63,26,26,36,64,65,66,38,39,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,31,28,26,29,62,26,26,59,60,36,36,64,64,65,65,66,66,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,62,131,131,29,31,31,31,31,31,31,31,31,26,28,26,26,130,29,26,59,60,61,62,63,31,130,130,28,32,29,26,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,28,59,60,61,62,63,58,31,33,32,29,26,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,28,59,60,61,62,63,58,31,33,32,29,26,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,28,59,60,61,62,63,58,31,33,32,29,26,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,28,59,60,61,62,63,58,31,33,28,132,36,36,64,64,65,65,66,66,29,26,28,59,60,61,62,63,31,32,29,26,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,28,59,60,61,62,63,58,31,33,26,26,31,26,28,29,26,33,133,133,134,135,136,135,136,137,135,136,134,137,138,138,0,73,73,73,73,73,73,73,73,73,73,73,73,73,73,0,0,0,0,73,73,73,73,0,0,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,79,79,79,80,0,79,80,78,80,78,79,79,80,79,80,0,80,79,0,79,79,80,79,80,78,79,79,79,80,0,77,80,79,78,79,79,80,79,0,0,79,79,77,78,79,79,80,80,80,80,80,80,79,78,0,0,79,79,80,79,80,80,80,79,80,78,79,79,78,79,77,80,80,80,80,80,80,80,80,79,80,80,80,79,79,79,80,80,80,80,80,79,79,77,80,80,79,79,78,79,79,76,76,78,76,76,77,78,79,80,81,75,20,76,77,78,79,80,81,75,20,75,20,75,76,77,78,79,80,81,75,20,76,77,78,79,80,81,75,20,76,77,78,79,80,81,75,20,76,77,78,79,80,81,75,20,76,77,78,79,80,81,75,20,76,76,77,77,78,78,79,79,80,80,81,81,75,75,20,20,76,77,78,79,80,81,75,20,76,77,78,79,80,81,75,20,76,77,78,79,80,81,75,20,75,20,75,20,76,77,78,79,80,81,75,20,75,20,20,20,75,75,75,20,20,20,76,77,78,79,80,81,75,20,76,77,78,79,80,81,75,20,76,77,78,79,80,81,75,20,76,77,78,79,80,81,75,20,76,77,78,79,80,81,75,20,0,0,139,139,139,139,0,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,0,0,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,0,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,83,83,83,82,83,83,82,82,83,82,0,0,83,0,83,82,0,82,83,82,82,0,7,83,82,82,82,82,82,83,82,82,83,83,83,83,82,82,82,83,82,82,82,82,83,83,0,0,0,0,82,83,83,0,83,83,7,0,82,82,87,0,0,141,141,141,141,141,88,89,16,82,25,83,90,87,7,88,89,16,82,25,83,90,87,7,141,16,82,25,83,87,7,16,82,25,83,87,7,16,82,141,16,25,141,88,89,16,25,90,87,141,141,16,82,25,83,7,16,82,90,91,141,90,87,90,16,25,16,82,82,25,83,83,90,87,7,7,88,89,16,82,25,25,83,90,87,7,91,141,90,87,16,25,16,25,16,25,16,82,141,90,88,89,16,82,25,83,90,87,7,141,141,88,89,90,90,141,16,25,90,90,90,16,82,25,83,7,91,141,90,87,91,141,90,87,91,141,90,87,141,141,141,88,89,141,141,141,16,25,16,82,25,83,87,7,16,82,25,83,7,88,89,16,82,25,83,90,87,7,88,89,16,82,25,83,90,87,7,88,89,16,82,25,83,90,87,7,141],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[2],0,[[],3],[[1,1],4],[[1,5],6],[[1,5],6],[7,1],[[]],[3,[[11,[[10,[8,9]]]]]],0,[[]],[12,4],0,[[12,12,3]],[8],[[1,1],[[11,[13]]]],0,[9,[[10,[1]]]],[[]],[[],2],[[],10],[[],10],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[15,3],[[10,[16,1]]]],[[]],[[]],[[]],[[]],[15,15],[8,8],[[]],[[]],[[15,15],13],[[8,8],13],0,[15,3],[[],15],[[15,15],4],[[8,8],4],[[],4],[[],4],[[15,5],6],[[15,5],6],[[8,5],6],[[8,5],6],[[]],[[]],[[15,3],[[11,[[10,[8,9]]]]]],[[15,17]],[[8,17]],[[]],[[]],[[15,12],4],[[[18,[8]]],15],[[15,8]],[[15,15],[[11,[13]]]],[[8,8],[[11,[13]]]],[19,8],[[19,20],8],[[21,19],8],[[15,9],[[10,[1]]]],[[]],[[]],[[],2],[[],2],[[],10],[[],10],[[],10],[[],10],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[22,2,3],21],[[]],[[]],[22,22],[[]],[[],22],[[22,5],6],[[22,5],6],[[]],[[22,12],11],[[22,12],[[11,[21]]]],[[22,12],[[11,[3]]]],[22,3],[[]],[[],22],[[22,21],[[10,[21,1]]]],[[]],[[],2],[[],10],[[],10],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[21,21],[[]],[[21,21],13],[21,21],[[21,21],4],[[],4],[[21,5],6],[[21,5],6],[[]],[[21,17]],[[]],[[21,23],21],[[21,21],[[11,[13]]]],[[]],[[],2],[[],10],[[],10],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[24,3],[[10,[25,1]]]],[[]],[[]],[[]],[[]],[24,24],[9,9],[[]],[[]],0,[24,3],[[],24],[[24,24],4],[[9,9],4],[[24,5],6],[[24,5],6],[[9,5],6],[[9,5],6],[[]],[15,24],[[]],[[24,3],[[11,[[10,[8,9]]]]]],[[]],[[]],[[24,12],4],[[[18,[9]]],24],[[24,8]],[[24,24],[[11,[13]]]],[[9,9],[[11,[13]]]],[[24,9],[[10,[1]]]],[[]],[[]],[[],2],[[],2],[[],10],[[],10],[[],10],[[],10],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[19,[11,[12]]],[[10,[26,2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[26,[27,[26]]],26],[[[18,[28]]],28],[[26,[27,[26]]],26],[[29,[18,[26]]],26],[[26,[18,[26]]],26],[[26,[30,[28]],31,32],[[10,[4,33]]]],0,0,[[29,32],[[10,[4,33]]]],[[29,32],[[10,[34,33]]]],[[29,32],[[10,[35,33]]]],[[29,32],[[10,[2,33]]]],[[29,31],29],[[26,31],26],[[26,[37,[36]],[27,[26]]],26],[[26,36,[27,[26]]],26],[[26,[27,[26]]],26],[[26,[27,[26]]],26],[[26,[27,[26]]],26],[26,26],[[26,[27,[26]]],26],[[26,[27,[26]]],26],0,0,[4,28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[31,31,32],[[10,[4,33]]]],[[31,32],[[10,[4,33]]]],[[31,31,32],[[10,[4,33]]]],[[31,31,31,32],[[10,[4,33]]]],[[38,31,31,32],[[10,[4,33]]]],[[39,31,32],[[10,[4,33]]]],[[40,31,31,32],[[10,[4,33]]]],[[41,31,31,32],[[10,[4,33]]]],[[42,31,31,32],[[10,[4,33]]]],[[43,31,31,32],[[10,[4,33]]]],[[44,31,31,32],[[10,[4,33]]]],[[45,31,32],[[10,[4,33]]]],[[46,31,31,32],[[10,[4,33]]]],[[47,31,31,32],[[10,[4,33]]]],[[48,31,31,32],[[10,[4,33]]]],[[49,31,32],[[10,[4,33]]]],[[50,31,32],[[10,[4,33]]]],[[51,31,31,32],[[10,[4,33]]]],[[52,31,31,32],[[10,[4,33]]]],[[53,31,32],[[10,[4,33]]]],[[54,31,32],[[10,[4,33]]]],[[55,31,32],[[10,[4,33]]]],[[56,31,32],[[10,[4,33]]]],[[57,31,32],[[10,[4,33]]]],[[26,26,32],[[10,[4,33]]]],[[26,26,32],[[10,[4,33]]]],[[26,32],[[10,[4,33]]]],[[26,32],[[10,[4,33]]]],[[26,26,32],[[10,[4,33]]]],[[26,26,32],[[10,[4,33]]]],[[26,26,26,32],[[10,[4,33]]]],[[26,26,26,32],[[10,[4,33]]]],[[31,31,32],[[10,[4,33]]]],[[58,58],4],[[31,31,32],[[10,[4,33]]]],[32,32],[29,29],[26,26],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[28,28],[59,59],[60,60],[61,61],[62,62],[63,63],[58,58],[31,31],[33,33],[[],[[37,[36]]]],[[],[[37,[64]]]],[[],[[37,[65]]]],[[],[[37,[66]]]],[38,[[37,[65]]]],[39,[[37,[64]]]],[40,[[37,[65]]]],[41,[[37,[36]]]],[42,[[37,[65]]]],[43,[[37,[65]]]],[44,[[37,[65]]]],[45,[[37,[64]]]],[46,[[37,[65]]]],[47,[[37,[65]]]],[48,[[37,[65]]]],[49,[[37,[64]]]],[50,[[37,[64]]]],[51,[[37,[65]]]],[52,[[37,[65]]]],[53,[[37,[64]]]],[54,[[37,[64]]]],[55,[[37,[64]]]],[56,[[37,[64]]]],[57,[[37,[64]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[36,36],13],[[64,64],13],[[65,65],13],[[66,66],13],[[38,38],13],[[39,39],13],[[42,42],13],[[43,43],13],[[44,44],13],[[45,45],13],[[46,46],13],[[47,47],13],[[48,48],13],[[49,49],13],[[50,50],13],[[51,51],13],[[54,54],13],[[55,55],13],[[56,56],13],[[57,57],13],[[58,58],13],[[[0,[67,68]]],[[10,[[10,[15,24]],33]]]],[[[0,[67,68]]],[[10,[[10,[15,24]],33]]]],[[26,26,32,69],[[10,[33]]]],[[26,26,32,69],[[10,[33]]]],[[26,32,69],[[10,[33]]]],[[26,32,69],[[10,[33]]]],[[26,26,32,69],[[10,[33]]]],[[26,26,32,69],[[10,[33]]]],[[26,26,26,32,69],[[10,[33]]]],[[26,26,26,32,69],[[10,[33]]]],[[38,26,26,32,69],[[10,[33]]]],[[41,26,26,32,69],[[10,[33]]]],[[32,69],[[10,[33]]]],[[29,32,69],[[10,[33]]]],[[26,32,69],[[10,[33]]]],[[59,32,69],[[10,[33]]]],[[60,32,69],[[10,[33]]]],[[61,32,69],[[10,[33]]]],[[62,32,69],[[10,[33]]]],[[31,31,32,69],[[10,[33]]]],[[31,32,69],[[10,[33]]]],[[31,31,32,69],[[10,[33]]]],[[31,31,31,32,69],[[10,[33]]]],[[38,31,31,32,69],[[10,[33]]]],[[39,31,32,69],[[10,[33]]]],[[40,31,31,32,69],[[10,[33]]]],[[41,31,31,32,69],[[10,[33]]]],[[42,31,31,32,69],[[10,[33]]]],[[43,31,31,32,69],[[10,[33]]]],[[44,31,31,32,69],[[10,[33]]]],[[45,31,32,69],[[10,[33]]]],[[46,31,31,32,69],[[10,[33]]]],[[47,31,31,32,69],[[10,[33]]]],[[48,31,31,32,69],[[10,[33]]]],[[49,31,32,69],[[10,[33]]]],[[50,31,32,69],[[10,[33]]]],[[51,31,31,32,69],[[10,[33]]]],[[52,31,31,32,69],[[10,[33]]]],[[53,31,32,69],[[10,[33]]]],[[54,31,32,69],[[10,[33]]]],[[55,31,32,69],[[10,[33]]]],[[56,31,32,69],[[10,[33]]]],[[57,31,32,69],[[10,[33]]]],0,[[31,12],4],[[21,31,32,69],[[10,[33]]]],[[],32],[[],58],[[32,18]],[[32,19,58,31],[[10,[23,33]]]],[26,26],[[26,[27,[26]]],26],[[26,26],2],[[26,26],2],[26,2],[26,2],[[26,26],2],[[26,26],2],[[26,26,26],2],[[26,26,26],2],[[21,31,32,69],[[10,[33]]]],[[26,[27,[26]]],26],[[36,36],4],[[64,64],4],[[65,65],4],[[66,66],4],[[29,29],4],[[26,26],4],[[26,[27,[26]]],26],[[38,38],4],[[39,39],4],[[42,42],4],[[43,43],4],[[44,44],4],[[45,45],4],[[46,46],4],[[47,47],4],[[48,48],4],[[49,49],4],[[50,50],4],[[51,51],4],[[54,54],4],[[55,55],4],[[56,56],4],[[57,57],4],[[28,28],4],[[59,59],4],[[60,60],4],[[61,61],4],[[62,62],4],[[63,63],4],[[58,58],4],[[31,31],4],[[31,31,32],[[10,[4,33]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[29,29,32],[[10,[29,33]]]],[[29,32],[[10,[29,33]]]],[[29,29,32],[[10,[29,33]]]],[[29,29,29,32],[[10,[29,33]]]],[[29,32],[[10,[29,33]]]],[[38,29,29,32],[[10,[29,33]]]],[[39,29,32],[[10,[29,33]]]],[[40,29,29,32],[[10,[29,33]]]],[[41,29,29,32],[[10,[29,33]]]],[[42,29,29,32],[[10,[29,33]]]],[[43,29,29,32],[[10,[29,33]]]],[[44,29,29,32],[[10,[29,33]]]],[[45,29,32],[[10,[29,33]]]],[[46,29,29,32],[[10,[29,33]]]],[[47,29,29,32],[[10,[29,33]]]],[[48,29,29,32],[[10,[29,33]]]],[[49,29,32],[[10,[29,33]]]],[[50,29,32],[[10,[29,33]]]],[[51,29,29,32],[[10,[29,33]]]],[[52,29,29,32],[[10,[29,33]]]],[[53,29,32],[[10,[29,33]]]],[[54,29,32],[[10,[29,33]]]],[[55,29,32],[[10,[29,33]]]],[[56,29,32],[[10,[29,33]]]],[[57,29,32],[[10,[29,33]]]],[[26,29],26],[34,28],[[32,5],6],[[32,5],6],[[29,5],6],[[29,5],6],[[26,5],6],[[26,5],6],[[38,5],6],[[38,5],6],[[39,5],6],[[39,5],6],[[40,5],6],[[40,5],6],[[41,5],6],[[41,5],6],[[42,5],6],[[42,5],6],[[43,5],6],[[43,5],6],[[44,5],6],[[44,5],6],[[45,5],6],[[45,5],6],[[46,5],6],[[46,5],6],[[47,5],6],[[47,5],6],[[48,5],6],[[48,5],6],[[49,5],6],[[49,5],6],[[50,5],6],[[50,5],6],[[51,5],6],[[51,5],6],[[52,5],6],[[52,5],6],[[53,5],6],[[53,5],6],[[54,5],6],[[54,5],6],[[55,5],6],[[55,5],6],[[56,5],6],[[56,5],6],[[57,5],6],[[57,5],6],[[28,5],6],[[28,5],6],[[59,5],6],[[59,5],6],[[60,5],6],[[60,5],6],[[61,5],6],[[61,5],6],[[62,5],6],[[62,5],6],[[63,5],6],[[63,5],6],[[58,5],6],[[58,5],6],[[31,5],6],[[31,5],6],[[33,5],6],[[33,5],6],[[]],[[]],[29,26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,58],[[]],[[]],[1,33],[[26,[27,[26]]],26],[[28,26,31,32],[[10,[[70,[2]],33]]]],[[28,26,26,32],[[10,[31,33]]]],[62,[[11,[12]]]],[62,12],[63,12],[32,[[10,[3,33]]]],[32,[[10,[3,33]]]],[[32,3],[[10,[3,33]]]],[[32,3],[[10,[3,33]]]],[[32,3],[[10,[3,33]]]],[[32,3],[[10,[3,33]]]],[[32,3],[[10,[3,33]]]],[[32,3],[[10,[3,33]]]],[[32,3],[[10,[3,33]]]],[[32,3],[[10,[3,33]]]],[[31,32,3],[[10,[3,33]]]],[32,[[10,[31,33]]]],[32,[[10,[31,33]]]],[[32,3],[[10,[31,33]]]],[[29,32,3],[[10,[31,33]]]],[[26,32,3],[[10,[31,33]]]],[[59,32,3],[[10,[31,33]]]],[[60,32,3],[[10,[31,33]]]],[[61,32,3],[[10,[31,33]]]],[[62,32,3],[[10,[31,33]]]],[[63,32,3],[[10,[31,33]]]],[[26,[27,[26]]],26],[[31,31,32],[[10,[4,33]]]],[[38,17]],[[39,17]],[[42,17]],[[43,17]],[[44,17]],[[45,17]],[[46,17]],[[47,17]],[[48,17]],[[49,17]],[[50,17]],[[51,17]],[[54,17]],[[55,17]],[[56,17]],[[57,17]],[[58,17]],[[31,17]],[[26,[27,[26]]],26],[[28,26,26,26,32],[[10,[26,33]]]],[[26,[27,[26]],[27,[26]]],26],[35,28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,4],[58,4],[58,4],[31,4],[[26,[27,[26]]],26],[[12,31,31],31],[[19,29,[27,[26]]],26],[[18,[27,[26]]],26],[[19,62,[27,[26]]],26],[[[71,[12,62]],[27,[26]]],26],[[19,31,[27,[26]]],26],[[18,[27,[26]]],26],[[19,[27,[58]],[11,[31]],[27,[26]],[27,[26]]],26],[[18,[27,[26]]],26],[[26,[27,[26]]],26],[[26,30,32],[[10,[26,33]]]],[[63,[18,[31]],32],[[10,[62,33]]]],[[26,[27,[26]]],26],0,0,[26,26],[[26,[27,[26]]],26],[65,41],[[2,[18,[31]],31],61],[[[11,[2]],18,31,[27,[26]]],62],[[2,[18,[2]],18,31,[27,[26]]],63],[26,26],[[26,[27,[26]]],26],[[36,36],[[11,[13]]]],[[64,64],[[11,[13]]]],[[65,65],[[11,[13]]]],[[66,66],[[11,[13]]]],[[38,38],[[11,[13]]]],[[39,39],[[11,[13]]]],[[42,42],[[11,[13]]]],[[43,43],[[11,[13]]]],[[44,44],[[11,[13]]]],[[45,45],[[11,[13]]]],[[46,46],[[11,[13]]]],[[47,47],[[11,[13]]]],[[48,48],[[11,[13]]]],[[49,49],[[11,[13]]]],[[50,50],[[11,[13]]]],[[51,51],[[11,[13]]]],[[54,54],[[11,[13]]]],[[55,55],[[11,[13]]]],[[56,56],[[11,[13]]]],[[57,57],[[11,[13]]]],[[58,58],[[11,[13]]]],[[31,32,[70,[31]]],[[10,[31,33]]]],[28,28],[[26,[27,[26]]],26],[[[11,[2]],18,31,[27,[26]]],29],[[62,69]],[[26,[27,[58]]],26],[[26,[27,[26]]],26],0,0,[[26,26,32],[[10,[31,33]]]],[[26,26,32],[[10,[31,33]]]],[[26,32],[[10,[31,33]]]],[[26,32],[[10,[31,33]]]],[[26,26,32],[[10,[31,33]]]],[[26,26,32],[[10,[31,33]]]],[[26,26,26,32],[[10,[31,33]]]],[[26,26,26,32],[[10,[31,33]]]],[[38,26,26,32],[[10,[31,33]]]],[[39,26,32],[[10,[31,33]]]],[[40,26,26,32],[[10,[31,33]]]],[[41,26,26,32],[[10,[31,33]]]],[[42,26,26,32],[[10,[31,33]]]],[[43,26,26,32],[[10,[31,33]]]],[[44,26,26,32],[[10,[31,33]]]],[[45,26,32],[[10,[31,33]]]],[[46,26,26,32],[[10,[31,33]]]],[[47,26,26,32],[[10,[31,33]]]],[[48,26,26,32],[[10,[31,33]]]],[[49,26,32],[[10,[31,33]]]],[[50,26,32],[[10,[31,33]]]],[[51,26,26,32],[[10,[31,33]]]],[[52,26,26,32],[[10,[31,33]]]],[[53,26,32],[[10,[31,33]]]],[[54,26,32],[[10,[31,33]]]],[[55,26,32],[[10,[31,33]]]],[[56,26,32],[[10,[31,33]]]],[[57,26,32],[[10,[31,33]]]],[[62,19]],[32,[[10,[33]]]],[[32,3],[[10,[33]]]],[[29,32,3],[[10,[29,33]]]],[[31,32,3],[[10,[31,33]]]],[[31,32],[[10,[31,33]]]],[[31,32],[[10,[31,33]]]],[[31,32],[[10,[31,33]]]],[[31,32,31,72],[[10,[31,33]]]],[[31,32],[[10,[31,33]]]],[[31,32],[[10,[31,33]]]],[[31,32],[[10,[31,33]]]],[26,26],[[[70,[2,28]]],28],[[[71,[12,26]]],26],[[26,[27,[26]]],26],[[12,31]],[[29,12,31]],[[26,12,31]],[[59,12,31]],[[60,12,31]],[[61,12,31]],[[62,12,31]],[[63,12,31]],[[31,12,31],31],[[[30,[2]],[30,[31]]]],[[[30,[2]],[30,[31]]]],[[[27,[58]],19],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[[18,[28]]],28],[32,[[10,[33]]]],[[26,26,32],[[10,[33]]]],[[26,26,32],[[10,[33]]]],[[26,32],[[10,[33]]]],[[26,32],[[10,[33]]]],[[26,26,32],[[10,[33]]]],[[26,26,32],[[10,[33]]]],[[26,26,26,32],[[10,[33]]]],[[26,26,26,32],[[10,[33]]]],[[29,32],[[10,[33]]]],[[26,32],[[10,[33]]]],[[28,26,26,32],[[10,[33]]]],[[59,32],[[10,[33]]]],[[60,32],[[10,[33]]]],[[61,32],[[10,[33]]]],[[62,32],[[10,[33]]]],[[63,32],[[10,[33]]]],[[31,32],[[10,[33]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[26,64],26],[19,26],[[[30,[2]],2],[[11,[3]]]],[[26,[27,[26]]],26],[[],28],[[29,73],29],[[26,73],26],[[33,73],33],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[73,73],[[]],0,[[73,73],4],0,[[73,5],6],[[]],[[73,12],2],[[]],0,0,0,[19,[[10,[[10,[15,24]],2]]]],[[19,[11,[12]]],[[10,[26,2]]]],[19,[[10,[26,2]]]],[19,[[10,[[10,[16,25]],2]]]],[[]],[[],10],[[],10],[[],14],0,0,0,[[]],[[]],[74,74],[[]],[[74,74],13],[[74,74],4],[[],4],[[74,5],6],[[74,5],6],[[]],[[74,17]],0,[[]],0,[[2,3,3],74],0,[[74,74],[[11,[13]]]],[[]],[[],2],[[],10],[[],10],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[75,75],[20,20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[76,76],13],[[77,77],13],[[78,78],13],[[79,79],13],[[80,80],13],[[81,81],13],[[75,75],13],[[20,20],13],[[76,76],4],[[77,77],4],[[78,78],4],[[79,79],4],[[80,80],4],[[81,81],4],[[75,75],4],[[20,20],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[76,5],6],[[76,5],6],[[77,5],6],[[77,5],6],[[78,5],6],[[78,5],6],[[79,5],6],[[79,5],6],[[80,5],6],[[80,5],6],[[81,5],6],[[81,5],6],[[75,5],6],[[75,5],6],[[20,5],6],[[20,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[76,17]],[[77,17]],[[78,17]],[[79,17]],[[80,17]],[[81,17]],[[75,17]],[[20,17]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[79,3],75],[[80,3],20],[[76,76],[[11,[13]]]],[[77,77],[[11,[13]]]],[[78,78],[[11,[13]]]],[[79,79],[[11,[13]]]],[[80,80],[[11,[13]]]],[[81,81],[[11,[13]]]],[[75,75],[[11,[13]]]],[[20,20],[[11,[13]]]],[[],75],[[],20],[[],20],[[],20],[[],75],[[],75],[[],75],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,[16,[[10,[2,2]]]],[[82,[18,[82]],[18,[3]],3,3],[[10,[2,2]]]],[25,[[10,[2,2]]]],[[83,[18,[82]],[18,[3]],3,3],[[10,[2,2]]]],0,[3,2],[[82,[11,[3]]],2],[75,[[10,[2,2]]]],[[],[[11,[2]]]],[[],12],[82,2],[[],[[10,[2,2]]]],[[],[[10,[2,2]]]],[[[18,[84]]],[[11,[2]]]],[4,[[11,[2]]]],[[],[[11,[2]]]],[[[18,[84]]],[[11,[2]]]],[4,[[11,[2]]]],[20,[[10,[2,2]]]],[83,[[10,[2,2]]]],[[],4],[75,4],[20,4],[[],12],0,0,[[]],[[]],[[85,3],2],[[],85],[[85,82,[11,[3]]],2],[[]],[[85,75],[[10,[2,2]]]],[[]],[85,12],[[85,82],2],[85,[[10,[2,2]]]],[85,[[10,[2,2]]]],[[85,[18,[84]]],[[11,[2]]]],[[85,4],[[11,[2]]]],[85,[[11,[2]]]],[[85,4],[[11,[2]]]],[[85,20],[[10,[2,2]]]],[[85,83],[[10,[2,2]]]],[85,4],[[85,75],4],[[85,20],4],[[],10],[[],10],[[],14],[85,12],0,[[]],[[]],[[86,3],2],[[],86],[[86,82,[11,[3]]],2],[[]],[[86,75],[[10,[2,2]]]],[[]],[86,12],[[86,82],2],[86,[[10,[2,2]]]],[86,[[10,[2,2]]]],[[86,[18,[84]]],[[11,[2]]]],[[86,4],[[11,[2]]]],[86,[[11,[2]]]],[[86,4],[[11,[2]]]],[[86,20],[[10,[2,2]]]],[[86,83],[[10,[2,2]]]],[86,4],[[86,75],4],[[86,20],4],[[],10],[[],10],[[],14],[86,12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[87,74]],[35,34],[34,35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,16],[82,82],[25,25],[83,83],[87,87],[7,7],[[]],[[]],[[]],[[]],[[]],[[]],[[16,16],13],[[82,82],13],[[],[[10,[16,25]]]],[16,[[10,[16,25]]]],[25,[[10,[16,25]]]],[12],[[],[[88,[87]]]],[[],[[89,[87]]]],[[],16],[[],25],[[],90],[[],87],[[]],[[]],[[16,16],4],[[82,82],4],[[25,25],4],[[83,83],4],[[7,7],4],[[],4],[[],4],0,[[74,[11,[[18,[35]]]]],[[10,[2]]]],[74,[[10,[7]]]],[[90,74,[11,[[18,[35]]]]],[[10,[2]]]],[[87,74,[11,[[18,[35]]]]],[[10,[2]]]],0,[16,16],[25,25],[[16,5],6],[[82,5],6],[[82,5],6],[[25,5],6],[[83,5],6],[[83,5],6],[[90,5],6],[[87,5],6],[[7,5],6],[[7,5],6],[[]],[[]],[[]],[[]],[16,25],[[]],[[]],[[]],[[]],[[]],[75,[[10,[35,2]]]],[75],[[90,75],[[10,[35,2]]]],[[87,75],[[10,[35,2]]]],[16,[[70,[84,[18,[82]]]]]],[25,[[70,[84,[18,[83]]]]]],[16,[[18,[82]]]],[25,[[18,[83]]]],[16],[25],[[16,17]],[[82,17]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23],[91,[[88,[91]]]],[91,[[89,[91]]]],[19,90],[[[18,[35]]],90],[82],[[16,82]],[[25,82]],0,[90,2],[90,[[18,[35]]]],[[16,16],[[11,[13]]]],[[82,82],[[11,[13]]]],[[25,25],[[11,[13]]]],[[83,83],[[11,[13]]]],[[7,7],[[11,[13]]]],[[],[[10,[35,2]]]],[[],[[10,[7]]]],[90,[[10,[35,2]]]],[87,[[10,[35,2]]]],[35,[[10,[2]]]],[[],[[10,[7]]]],[[90,35],[[10,[2]]]],[[87,35],[[10,[2]]]],[[35,20],[[10,[2]]]],[20],[[90,35,20],[[10,[2]]]],[[87,35,20],[[10,[2]]]],[[]],[[]],[[]],[[[88,[91]],16],[[10,[91,2]]]],[[[89,[91]],25],[[10,[91,2]]]],[[]],[35],[83,[[10,[7]]]],[[16,83],[[10,[7]]]],[[25,83],[[10,[7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]]],"c":[],"p":[[4,"Error"],[3,"String"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Error"],[4,"CoreOp"],[4,"StandardOp"],[4,"Result"],[4,"Option"],[15,"str"],[4,"Ordering"],[3,"TypeId"],[3,"CoreProgram"],[3,"CoreProgram"],[8,"Hasher"],[3,"Vec"],[8,"ToString"],[3,"Output"],[4,"Location"],[3,"Globals"],[15,"isize"],[3,"StandardProgram"],[3,"StandardProgram"],[4,"Expr"],[8,"Into"],[4,"Pattern"],[4,"ConstExpr"],[15,"slice"],[4,"Type"],[3,"Env"],[4,"Error"],[15,"f64"],[15,"i64"],[8,"AssignOp"],[3,"Box"],[3,"Add"],[3,"Negate"],[4,"Arithmetic"],[3,"Assign"],[3,"BitwiseAnd"],[3,"BitwiseNand"],[3,"BitwiseNor"],[3,"BitwiseNot"],[3,"BitwiseOr"],[3,"BitwiseXor"],[4,"Comparison"],[3,"Get"],[4,"Put"],[3,"And"],[3,"Or"],[3,"Not"],[3,"New"],[3,"Delete"],[3,"Tag"],[3,"Data"],[4,"Mutability"],[3,"CoreBuiltin"],[3,"StandardBuiltin"],[3,"FFIProcedure"],[3,"Procedure"],[3,"PolyProcedure"],[8,"UnaryOp"],[8,"BinaryOp"],[8,"TernaryOp"],[8,"Sized"],[8,"Clone"],[8,"AssemblyProgram"],[3,"HashMap"],[3,"BTreeMap"],[8,"Fn"],[3,"SourceCodeLocation"],[3,"FFIBinding"],[3,"Input"],[4,"Axis"],[4,"Direction"],[4,"Color"],[4,"InputMode"],[4,"OutputMode"],[3,"Channel"],[4,"CoreOp"],[4,"StandardOp"],[15,"i32"],[3,"C"],[3,"X86"],[3,"StandardDevice"],[3,"CoreInterpreter"],[3,"StandardInterpreter"],[3,"TestingDevice"],[8,"Device"],[13,"Compare"],[13,"IsGreater"],[13,"IsGreaterEqual"],[13,"IsLess"],[13,"IsLessEqual"],[13,"IsEqual"],[13,"IsNotEqual"],[13,"GetAddress"],[13,"Move"],[13,"Copy"],[13,"Index"],[13,"Add"],[13,"Sub"],[13,"Mul"],[13,"Div"],[13,"Rem"],[13,"DivRem"],[13,"And"],[13,"Or"],[13,"PopFrom"],[13,"Array"],[13,"BitwiseNand"],[13,"BitwiseXor"],[13,"BitwiseOr"],[13,"BitwiseNor"],[13,"BitwiseAnd"],[13,"Global"],[13,"PushTo"],[13,"IsGreater"],[13,"IsLess"],[13,"Pow"],[13,"Add"],[13,"Sub"],[13,"Mul"],[13,"Div"],[13,"Rem"],[8,"Compile"],[8,"GetSize"],[8,"GetType"],[8,"Simplify"],[8,"TypeCheck"],[13,"AnnotatedWithSource"],[13,"AnnotatedWithSource"],[13,"MismatchedTypes"],[13,"MismatchedMutability"],[13,"NonExhaustivePatterns"],[13,"AnnotatedWithSource"],[8,"CompiledTarget"],[8,"Architecture"],[8,"VirtualMachineProgram"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
