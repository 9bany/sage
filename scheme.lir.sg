// Implement a scheme evaluator in Sage.
proc strlen(ch: &Char): Int {
    let len = 0;
    while ch[len] != '\0' {
        len += 1;
    }
    return len;
}

proc strcpy(dst: &Char, src: &Char) {
    let i = 0;
    for (); src[i] != '\0'; i+=1 {
        dst[i] = src[i];
    }
    dst[i] = '\0';
}

struct String {
    data: &Char,
    len: Int,
}

proc string_new(s: &Char): String {
    let len = 0;
    while s[len] != '\0' {
        len += 1;
    }

    let buffer = alloc(sizeof(Char) * len) as &Char;
    strcpy(buffer, s);

    return {
        data = buffer,
        len = len
    };
}

proc string_print(s: String) {
    for let i=0; i < s.len; i+=1 {
        print(s.data[i]);
    }
}

enum Expr {
    Boolean Bool,
    Decimal Float,
    Integer Int,
    Complex {
        real: Float,
        imag: Float,
    },
    Symbol String,
    String String,
    Pair {
        car: &Expr,
        cdr: &Expr,
    },
    Nil,
    Procedure {
        params: &Expr,
        body: &Expr,
        env: &Env,
    },
    Closure {
        params: &Expr,
        body: &Expr,
        env: &Env,
    },
    Builtin(String, (&Expr, &Env) -> Expr),
    Continuation {
        env: &Env,
    },
}

struct Env {
    bindings: Expr,
    parent: &Env,
}

proc root_env(): Env = {
    bindings = Expr of Nil,
    parent = Null
};

proc env_free(env: Env) {
    expr_free(env.bindings);
}

proc expr_free(expr: Expr) {
    match expr {
        of Pair { car, cdr } => {
            expr_free(*car);
            expr_free(*cdr);
            del car;
            del cdr;
        },
        of Procedure { params, body, env } => {
            expr_free(*params);
            expr_free(*body);
            env_free(*env);
            del params;
            del body;
            del env;
        },
        of Closure { params, body, env } => {
            expr_free(*params);
            expr_free(*body);
            env_free(*env);
            del params;
            del body;
            del env;
        },
        of Continuation { env } => {
            env_free(*env);
            del env;
        },
        _ => {}
    }
}

proc cons(car: Expr, cdr: Expr): Expr {
    return Expr of Pair {
        car = new car,
        cdr = new cdr
    };
}

proc expr_print(expr: &Expr) {
    match *expr {
        of Boolean b => print(b),
        of Integer i => print(i),
        of Symbol s => print(s),
        of String s => print(s),
        of Pair { car, cdr } => {
            print("(");
            expr_print(car);
            print(" . ");
            expr_print(cdr);
            print(")");
        },
        of Nil => print("()"),
        of Procedure { params, body, env } => {
            print("#<procedure>");
        },
        of Closure { params, body, env } => {
            print("#<closure>");
        },
        of Builtin b => {
            print("#<builtin>");
        },
        of Continuation { env } => {
            print("#<continuation>");
        },
        _ => {}
    }
}

proc expr_println(expr: &Expr) {
    expr_print(expr);
    print("\n");
}

proc expr_reduce(acc: Expr, x: Expr, env: &Env, fun: (Expr, Expr, &Env) -> Expr): Expr {
    match x {
        of Pair { car, cdr } => {
            acc = fun(acc, *car, env);
            expr_reduce(acc, *cdr, env, fun);
        },
        of Nil => acc,
        _ => fun(acc, x, env)
    }
}

proc expr_map(x: Expr, env: &Env, fun: (Expr, &Env) -> Expr): Expr {
    match x {
        of Pair { car, cdr } => cons(fun(*car, env), expr_map(*cdr, env, fun)),
        of Nil => Expr of Nil,
        _ => fun(x, env)
    }
}

proc sum(acc: Expr, x: Expr, env: &Env): Expr {
    match acc {
        of Integer i => {
            match x {
                of Integer j => Expr of Integer (i + j),
                of Decimal j => Expr of Decimal (i as Float + j),
                _ => acc
            }
        },
        of Decimal i => {
            match x {
                of Integer j => Expr of Decimal (i + j as Float),
                of Decimal j => Expr of Decimal (i + j),
                _ => acc
            }
        },
        _ => acc
    }
}

proc prod(acc: Expr, x: Expr, env: &Env): Expr {
    match acc {
        of Integer i => {
            match x {
                of Integer j => Expr of Integer (i * j),
                of Decimal j => Expr of Decimal (i as Float * j),
                _ => acc
            }
        },
        of Decimal i => {
            match x {
                of Integer j => Expr of Decimal (i * j as Float),
                of Decimal j => Expr of Decimal (i * j),
                _ => acc
            }
        },
        _ => acc
    }
}

proc inc(x: Expr, env: &Env): Expr {
    match x {
        of Integer i => Expr of Integer (i + 1),
        of Decimal i => Expr of Decimal (i + 1.0),
        _ => x
    }
}

proc dec(x: Expr, env: &Env): Expr {
    match x {
        of Integer i => Expr of Integer (i - 1),
        of Decimal i => Expr of Decimal (i - 1.0),
        _ => x
    }
}


proc range(start: Int, end: Int): Expr {
    if start > end {
        return Expr of Nil;
    } else {
        return cons(Expr of Integer start, range(start + 1, end));
    }
}

let expr = cons(Expr of Integer 1, cons(Expr of Integer 2, cons(Expr of Integer 3, cons(Expr of Integer 4, Expr of Nil))));
let env = root_env();

print("expr: ");
expr_println(&expr);

print("  reduce(sum): ");
let result = expr_reduce(Expr of Integer 0, expr, &env, sum);
expr_println(&result);

print("  reduce(product): ");
let result = expr_reduce(Expr of Integer 1, expr, &env, prod);
expr_println(&result);

print("  map(increment): ");
let result = expr_map(expr, &env, inc);
expr_println(&result);

for let i=0; i<1000; i+=1 {
    let range = range(1, i);
    expr_println(&range);
    expr_free(range);
}

let text = "woo!!!\0";
let s = string_new(&text as &Char);
string_print(s);
