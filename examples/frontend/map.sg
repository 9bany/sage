
def exit(n: Int): ! {
    print("Exit: ", n, "\n");
    debug();
    while True {}
}

def panic(s: &Char): ! {
    for let mut i=0; s[i] != '\0'; i += 1 {
        print(s[i]);
    }
    println();
    exit(1);
}

enum Option<T> {
    Some(T),
    Nothing
}

impl Option<T> {
    def nullify(self: &mut Option<T>) {
        *self = Option<T> of Nothing;
    }

    def as_ref(self: &Option<T>): Option<&T> {
        let inner = self as &T;
        if let &of Nothing = self {
            return Option<&T> of Nothing;
        }
        return Option<&T> of Some(inner);
    }

    def as_ref_mut(self: &mut Option<T>): Option<&mut T> {
        let inner = self as &mut T;
        if let &of Nothing = self {
            return Option<&mut T> of Nothing;
        }
        return Option<&mut T> of Some(inner);
    }

    def print(self: &Option<T>) {
        match self {
            &of Some(x) => print("Some(", x, ")"),
            _ => print("Nothing")
        }
    }

    def println(self: &Option<T>) {
        self.print();
        print("\n");
    }

    def map<U>(self: &Option<T>, f: T -> U): Option<U> {
        match *self {
            of Some(x) => Option<U> of Some(f(x)),
            _ => Option<U> of Nothing
        }
    }

    def is_some(self: &Option<T>): Bool {
        match self {
            &of Some(_) => True,
            _ => False
        }
    }

    def is_none(self: &Option<T>): Bool {
        match self {
            &of Some(_) => False,
            _ => True
        }
    }

    def unwrap(self: Option<T>): T {
        match self {
            of Some(x) => x,
            _ => panic(&"called `Option.unwrap()` on a `Nothing` value" as &Char)
        }
    }

    def unwrap_or(self: Option<T>, default: T): T {
        match self {
            of Some(x) => x,
            _ => default
        }
    }
}


def malloc<T>(n: Int): &mut T {
    return alloc(n * sizeof<T>());
}

def free<T>(ptr: &mut T) {
    del ptr;
}

struct Vec<T> {
    data: &mut T,
    length: Int,
    cap: Int
}

def memcpy<T>(dest: &mut T, src: &T, size: Int) {
    for let mut i=0; i<size; i+=1 {
        dest[i] = src[i];
    }
}

impl Vec<T> {
    def make(): Vec<T> {
        let cap = 128;
        let mut data = alloc(cap * sizeof<T>()) as &mut T;
        return {
            data=data,
            length=0,
            cap=cap
        };
    }

    def reserve(self: &mut Vec<T>, cap: Int) {
        if cap > self.cap {
            let mut new_data = malloc<T>(cap);
            memcpy<T>(new_data, self.data, self.length);
            free<T>(self.data);
            self.data = new_data;
            self.cap = cap;
        }
    }

    def push(self: &mut Vec<T>, x: T) {
        if self.length == self.cap {
            self.reserve(self.cap * 2);
        }
        self.data[self.length] = x;
        self.length += 1;
    }

    def pop(self: &mut Vec<T>): Option<T> {
        if self.length == 0 {
            return Option<T> of Nothing;
        }
        self.length -= 1;
        return Option<T> of Some(self.data[self.length]);
    }

    def clear(self: &mut Vec<T>) {
        self.length = 0;
    }

    def print(self: &Vec<T>) {
        print("[");
        for let mut i=0; i < self.length; i += 1 {
            print(self.data[i]);
            if i < self.length - 1 {
                print(", ");
            }
        }
        print("]");
    }

    def println(self: &Vec<T>) {
        self.print();
        print("\n");
    }

    def get(self: &Vec<T>, i: Int): &T {
        return &(self.data[i]);
    }

    def get_mut(self: &mut Vec<T>, i: Int): &mut T {
        return &mut (self.data[i]);
    }

    def set(self: &mut Vec<T>, i: Int, x: T) {
        self.data[i] = x;
    }

    def nth(self: &Vec<T>, i: Int): Option<&T> {
        if i < 0 || i >= self.length {
            return Option<&T> of Nothing;
        }
        return Option<&T> of Some(self.get(i));
    }

    def len(self: &Vec<T>): Int {
        return self.length;
    }

    def map<U>(self: &Vec<T>, f: T -> U): Vec<U> {
        let mut new_vec = Vec.make<U>();
        for let mut i=0; i < self.length; i += 1 {
            new_vec.push(f(self.data[i]));
        }
        return new_vec;
    }
}

// Hash a value
def hash<T>(t: T): Int {
    let size = sizeof(t);
    let ptr = &t as &Int;
    
    let mut hashValue = 5381;
    def left_shift(mut a: Int, mut b: Int): Int = {
        while b {
            a *= 2;
            b -= 1;
        }
        return a;
    }

    for let mut i = 0; i < size; i += 1 {
        let mut value = ptr[i];
        while (value != 0) {
            let digit = value % 10;
            hashValue = (left_shift(hashValue, 5) + hashValue) + digit;
            value /= 10;
        }
    }

    if hashValue < 0 {
        hashValue = -hashValue;
    }
    
    return hashValue;
}
// Compare two values for equality
def eq<K>(a: K, b: K): Bool {
    let size = sizeof(a);
    let a_ptr = &a as &Int;
    let b_ptr = &b as &Int;
    
    for let mut i=0; i<size; i+=1 {
        if a_ptr[i] != b_ptr[i] {
            return False;
        }
    }
    return True;
}

struct Entry<K, V> {
    key: K,
    value: V
}

struct HashMap<K, V> {
    data: Vec<Option<Entry<K, V>>>,
    occupied: Int,
}

impl HashMap<K, V> {
    def make(): HashMap<K, V> {
        let mut data = Vec.make<Option<Entry<K, V>>>();
        for let mut i=0; i < 128; i += 1 {
            data.push(Option<Entry<K, V>> of Nothing);
        }
        return {
            data=data,
            occupied=0
        };
    }

    def len(self: &HashMap<K, V>): Int {
        return self.occupied;
    }

    def contains_key(self: &HashMap<K, V>, key: K): Bool {
        let mut index = hash<K>(key) % self.data.len();
        while self.data.get(index).is_some() {
            if eq<K>(self.data.get(index).unwrap().key, key) {
                return True;
            }
            index = (index + 1) % self.data.len();
        }
        return False;
    }
    
    def insert(self: &mut HashMap<K, V>, key: K, value: V) {
        if self.occupied * 2 > self.data.len() {
            for let mut i=0; i < self.occupied * 2; i += 1 {
                self.data.push(Option<Entry<K, V>> of Nothing);
            }
        }
        println("self.data.len() = ", self.data.len());
        let mut index = (hash<K>(key)) % (self.data.len());
        while self.data.get(index).is_some() {
            if eq<K>(self.data.get(index).unwrap().key, key) {
                self.data.set(index, Option<Entry<K, V>> of Some({key=key, value=value}));
                return ();
            }
            index = (index + 1) % self.data.len();
        }
        println("index = ", index);
        self.data.set(index, Option<Entry<K, V>> of Some({key=key, value=value}));
        self.occupied += 1;
    }

    def remove(self: &mut HashMap<K, V>, key: K) {
        let mut index = hash<K>(key) % self.data.len();
        while self.data.get(index).is_some() {
            if eq<K>(self.data.get(index).unwrap().key, key) {
                self.data.set(index, Option<Entry<K, V>> of Nothing);
                self.occupied -= 1;
                return ();
            }
            index = (index + 1) % self.data.len();
        }
    }

    def get(self: &HashMap<K, V>, key: K): Option<&V> {
        let mut index = hash<K>(key) % self.data.len();
        while self.data.get(index).is_some() {
            if eq<K>(self.data.get(index).unwrap().key, key) {
                match self.data.get(index).as_ref() {
                    of Some(inner) => {
                        return Option<&V> of Some(&(inner.value));
                    },
                    _ => ()
                }
            }
            index = (index + 1) % self.data.len();
        }
        return Option<&V> of Nothing;
    }

    def get_mut(self: &mut HashMap<K, V>, key: K): Option<&mut V> {
        let mut index = hash<K>(key) % self.data.len();
        while self.data.get(index).is_some() {
            if eq<K>(self.data.get(index).unwrap().key, key) {
                match self.data.get_mut(index).as_ref_mut() {
                    of Some(inner) => {
                        return Option<&mut V> of Some(&mut (inner.value));
                    },
                    _ => ()
                }
            }
            index = (index + 1) % self.data.len();
        }
        return Option<&mut V> of Nothing;
    }

    def print(self: &HashMap<K, V>) {
        print("{");
        let mut first = True;
        for let mut i=0; i < self.data.len(); i += 1 {
            if self.data.get(i).is_some() {
                if !first {
                    print(", ");
                }
                print(self.data.get(i).unwrap().key);
                print(": ");
                print(self.data.get(i).unwrap().value);
                first = False;
            }
        }
        print("}");
    }

    def println(self: &HashMap<K, V>) {
        self.print();
        print("\n");
    }
}


let mut m = HashMap.make<Int, &Char>();

m.insert(1, &"one" as &Char);
m.insert(2, &"two" as &Char);
m.insert(3, &"three" as &Char);

for let mut i=0; i < 10; i += 1 {
    let contains_key = m.contains_key(i);
    print("m.contains_key(", i, ") = ", contains_key, "\n");
    if contains_key {
        let s = *(m.get(i).unwrap());
        for let mut j=0; s[j] != '\0'; j += 1 {
            print(s[j]);
        }
        println();
    }
}