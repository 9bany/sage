type Dir = enum { North, South, East, West } in

type List = (Int, &List) in

proc alloc(n: Int) -> &Cell = std {
    alloc [SP]
} in

proc test(i: Int) -> Char = {
    match i {
        0 => 'a',
        1 => 'b',
        2 => 'c',
        3 => 'd',
        4 => 'e',
        5 => 'f',
        6 => 'g',
        7 => 'h',
        8 => 'i',
        9 => 'j',
        _ => '?'
    }
} in

proc write(user_ptr: &Char, len: Int) -> None = {
    match user_ptr {
        Null => put "Null pointer!\n",
        valid_ptr => {
            let i = 0 in {
                while i < len {
                    put valid_ptr[i];
                    i += 1
                }
            }
        }
    }
} in

proc putlist(l: &List) -> None = {
    match l {
        Null => put '\n',
        valid_ptr => {
            put valid_ptr->0;
            put ' ';
            putlist(valid_ptr->1)
        }
    }
} in

let i = 0,
    pos = struct { x = 16, y = -17 },
    dir = Dir of South(),
    g = (Dir of North(), 2, 3, pos),
    x = match (dir, (6, 'a', pos)) {
        (of North, (6, 'b', _)) => put "Wow, north 1!\n",
        (of South, (5, 'a', _)) => put "Wow, north 2!\n",
        (of North, (6, 'a', _)) => put "Wow, north 3!\n",
        (of North, (5, 'b', _)) => put "Wow, north 4!\n",
        (of North, (5, 'a', _)) => put "Wow, north 5!\n",
        (of South, (6, 'a', struct { x = 16, y = -16})) => put "Wow, north 6!\n",
        (of South, (6, 'a', struct { x = 16, y = h})) => {
            put h;
            put "Wow, north 7!\n";
        },
        _ => put "default!\n"
    } in {
    while i < 10 {
        put test(i);
        i += 1
    };
    put "\nDone!\n";
    
    let str = "Hello, world!" in {
        write((&str) as &Char, 13)
    };

    if let (of North, b, c, struct {x=d, y=e}) = g {
        put b;
        put c;
        put d;
        put e;
    } else {
        put "Nope!"
    };

    match (5, 8) {
        (4, x) | (x, 5) => put 'g',
        _ => put "Nope!"
    };


    type Tag = enum { A, B, C },
        Union = union {
        a: Int,
        b: Float,
        c: Bool
    } in match (Tag of C(), union {a = 5, Union..}) {
        (of A, u) => { put "\na\n"; put u },
        (of B, u) => { put "\na\n"; put u },
        (of C, u) => { put "\na\n"; put u },
        _ => put "Nope!"
    };
    put '\n';


    let n = 16 in
        match (alloc(n)) {
            Null => put "Null pointer!\n",
            valid_ptr => {
                put "Allocated ";
                put n;
                put " cells at ";
                put valid_ptr;
                put '\n'
            }
        };


    write(Null, 10);
    
    let x = (1, Null),
        y = (2, &x),
        z = (3, &y),
        w = (4, &z) in {
        putlist(&w)
    };
}

