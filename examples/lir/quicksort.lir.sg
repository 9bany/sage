proc bitxor(a: Int, b: Int) -> Int = core {
    bitwise-xor [SP], [SP - 1]
    pop
} in

proc bitor(a: Int, b: Int) -> Int = core {
    bitwise-or [SP], [SP - 1]
    pop
} in

proc bitnand(a: Int, b: Int) -> Int = core {
    bitwise-nand [SP], [SP - 1]
    pop
} in

proc bitand(a: Int, b: Int) -> Int = core {
    bitwise-and [SP], [SP - 1]
    pop
} in

proc bitnot(x: Int) -> Int = core {
    bitwise-not [SP]
} in

proc inc(x: &Int) = core {
    inc [[SP]]
    pop
} in

proc dec(x: &Int) = core {
    dec [[SP]]
    pop
} in

proc alloc(size: Int) -> &Cell = std {
    // set A, 10000
    // index SP, A, C
    // push C
    // add [SP - 1], [[SP]]
    // lea [[SP]], [SP - 1]
    // add [[SP]], [SP - 1]
    // pop
    alloc [SP]
} in

proc free(ptr: &Int) = std {
    free [SP]
    pop
} in

proc puthex(n: Int, lower: Bool) -> None = {
    if (n < 16) {
        put (n + if (n < 10) {
            48
        } else {
            if lower {
                87
            } else {
                55
            }
        }) as Char
    } else {
        puthex(n / 16, lower);
        puthex(n % 16, lower)
    }
} in

proc putbyte(n: Int, lower: Bool) -> None = {
    puthex(n / 16, lower);
    puthex(n % 16, lower)
} in


proc ln() -> None = {
    put '\n'
} in

proc min(x: Int, y: Int) -> Int = {
    if (x < y) x else y
} in
proc max(x: Int, y: Int) -> Int = {
    if (x > y) x else y
} in


type List = struct { data: Int, next: &List } in

proc sort(node: &List) -> None = {
    if (node->next != Null) {
        sort(node->next);
        let a = min(node->data, node->next->data),
            b = max(node->data, node->next->data)
            in {
            if (b != node->data) {
                sort(node->next);
            };
            node->data = a;
            node->next->data = b;
        };
    }
} in

proc len(node: &List) -> Int = {
    if (node != Null) {
        len(node->next) + 1
    } else {
        0
    }
} in


proc index(node: &List, n: Int) -> &List = {
    while n {
        node = node->next;
        n -= 1;
    };
    node
} in

proc swapi(a: &Int, b: &Int) = {
    let tmp = (*a) in {
        (*a) = *b;
        (*b) = tmp;
    }
} in

proc partition_arr(arr: &Int, low: Int, high: Int) -> Int = {
    let pivot = arr[high],
        i = low - 1,
        j = low in {
        while j < high {
            if (arr[j] <= pivot) {
                i += 1;
                swapi(&arr[j], &arr[i]);
            };
            j += 1
        };
        swapi(&arr[i + 1], &arr[high]);
        i + 1
    }
} in

proc quicksort_arr(arr: &Int, low: Int, high: Int) = {
    if (low < high) {
        let pi = partition_arr(arr, low, high) in {
            quicksort_arr(arr, low, pi - 1);
            quicksort_arr(arr, pi + 1, high);
        }
    }
} in

const SIZE = 100 in
let arr: &Int = alloc(SIZE * 2) as &Int, i = 0, a = 5, b = 6 in {
    put "unsorted: [";
    while i < SIZE {
        arr[i] = SIZE - i;
        put arr[i];
        if (i < SIZE - 1) {
            put ", ";
        };
        i += 1;
    };
    put "]\n";
    quicksort_arr(arr, 0, SIZE - 1);
    put "sorted: [";
    i = 0;
    while i < SIZE {
        put arr[i];
        if (i < SIZE - 1) {
            put ", ";
        };
        i += 1;
    };
    put "]\n";
}