const bitxor = proc(a: Int, b: Int) -> Int = core {
    bitwise-xor [SP], [SP - 1] pop
}, bitor = proc(a: Int, b: Int) -> Int = core {
    bitwise-or [SP], [SP - 1] pop
}, bitnand = proc(a: Int, b: Int) -> Int = core {
    bitwise-nand [SP], [SP - 1] pop
}, bitand = proc(a: Int, b: Int) -> Int = core {
    bitwise-and [SP], [SP - 1] pop
}, bitnot = proc(x: Int) -> Int = core {
    bitwise-not [SP]
}, lt = proc(a: Int, b: Int) -> Bool = core {
    lt [SP - 1], [SP], A pop
    mov A, [SP]
}, gt = proc(a: Int, b: Int) -> Bool = core {
    gt [SP - 1], [SP], A pop
    mov A, [SP]
}, eq = proc(a: Int, b: Int) -> Bool = core {
    eq [SP - 1], [SP], A pop
    mov A, [SP]
}, neq = proc(a: Int, b: Int) -> Bool = core {
    neq [SP - 1], [SP], A pop
    mov A, [SP]
}, and = proc(a: Bool, b: Bool) -> Bool = core {
    and [SP], [SP - 1] pop
}, put = proc(n: Int) -> None = core {
    put [SP]
    pop
} in

proc putdec(n: Int) -> None = {
    if (lt(n, 10)) {
        put(n + 48)
    } else {
        putdec(n / 10);
        put(n % 10 + 48)
    }
} in

proc puthex(n: Int, lower: Bool) -> None = {
    if (lt(n, 16)) {
        put(n + if (lt(n, 10)) {
            48
        } else {
            if lower {
                87
            } else {
                55
            }
        })
    } else {
        puthex(n / 16, lower);
        puthex(n % 16, lower)
    }
} in

proc putbyte(n: Int, lower: Bool) -> None = {
    puthex(n / 16, lower);
    puthex(n % 16, lower)
} in

const putint = proc(n: Int) -> None = { putbyte(n, false) } in

const putchar = proc(ch: Char) -> None = {
    put(ch as Int)
} in

const getchar = proc() -> Char = core {
    next SP
    get [SP]
} in

proc ln() -> None = {
    putchar('\n')
} in

proc lsh(a: Int, b: Int) -> Int = {
    while b {
        a = a * 2;
        b = b - 1;
    };
    a
} in

proc rsh(a: Int, b: Int) -> Int = {
    while b {
        a = a / 2;
        b = b - 1;
    };
    a
} in

proc xtime(n: Int) -> Int = {
    n = bitand(n, 255) * 2;
    if (lt(n, 256)) n
    else (bitxor(n, 27))
} in

proc mul(a: Int, b: Int) -> Int = {
    a = bitand(a, 255);
    b = bitand(b, 255);
    let result = 0,
        next_term = a,
        i = 0 in {
        while (lt(i, 8)) {
            if (bitand(rsh(b, i), 1)) {
                result = bitxor(result, next_term);
            };
            next_term = xtime(next_term);
            i = i + 1;
        };
        bitand(result, 255)
    }
} in

type State = [Int * 16] in

proc row_major(c0r0: Int, c1r0: Int, c2r0: Int, c3r0: Int,
    c0r1: Int, c1r1: Int, c2r1: Int, c3r1: Int,
    c0r2: Int, c1r2: Int, c2r2: Int, c3r2: Int,
    c0r3: Int, c1r3: Int, c2r3: Int, c3r3: Int
) -> State = {[
    c0r0,
    c0r1,
    c0r2,
    c0r3,

    c1r0,
    c1r1,
    c1r2,
    c1r3,

    c2r0,
    c2r1,
    c2r2,
    c2r3,

    c3r0,
    c3r1,
    c3r2,
    c3r3,
]} in

proc col_major(c0r0: Int, c0r1: Int, c0r2: Int, c0r3: Int,
    c1r0: Int, c1r1: Int, c1r2: Int, c1r3: Int,
    c2r0: Int, c2r1: Int, c2r2: Int, c2r3: Int,
    c3r0: Int, c3r1: Int, c3r2: Int, c3r3: Int,
) -> State = {[
    c0r0,
    c0r1,
    c0r2,
    c0r3,

    c1r0,
    c1r1,
    c1r2,
    c1r3,

    c2r0,
    c2r1,
    c2r2,
    c2r3,

    c3r0,
    c3r1,
    c3r2,
    c3r3,
]} in

proc get(self: &State, x: Int, y: Int) -> Int = {
    self[0][x + y * 4]
} in

proc set(self: &State, x: Int, y: Int, val: Int) -> None = {
    self[0][x + y * 4] = val;
} in

proc putstate(self: State) -> None = {
    let i = 0, j = 0 in {
        while lt(i, 4) {
            while lt(j, 4) {
                putint(get(&self, j, i)); putchar(' ');
                j = j + 1;
            }; putchar('\n');
            j = 0;
            i = i + 1;
        }
    }
} in

proc rot_row(self: State, y: Int, n: Int) -> State = {
    while n {
        let a = get(&self, 0, y),
            b = get(&self, 1, y),
            c = get(&self, 2, y),
            d = get(&self, 3, y) in {
            set(&self, 0, y, b);
            set(&self, 1, y, c);
            set(&self, 2, y, d);
            set(&self, 3, y, a);
        };
        n = n - 1;
    };
    self
} in

proc shift_rows(self: State) -> State = {
    rot_row(rot_row(rot_row(self, 1, 1), 2, 2), 3, 3)
} in

proc inverse_shift_rows(self: State) -> State = {
    rot_row(rot_row(rot_row(self, 1, 3), 2, 2), 3, 1)
} in

proc add_round_key(self: State, round_key: State) -> State = {
    let i = 0 in {
        while lt(i, 16) {
            ((&self) as &Int)[i] = bitxor(((&self) as &Int)[i], ((&round_key) as &Int)[i]);
            i = i + 1;
        };
        self
    }
} in

proc mix_columns(self: State) -> State = {
    let j = 0 in while lt(j, 4) {
        let s0 = bitxor(bitxor(bitxor(mul(get(&self, j, 0), 2), mul(get(&self, j, 1), 3)), get(&self, j, 2)), get(&self, j, 3)),
            s1 = bitxor(bitxor(bitxor(get(&self, j, 0), mul(get(&self, j, 1), 2)), mul(get(&self, j, 2), 3)), get(&self, j, 3)),
            s2 = bitxor(bitxor(bitxor(get(&self, j, 0), get(&self, j, 1)), mul(get(&self, j, 2), 2)), mul(get(&self, j, 3), 3)),
            s3 = bitxor(bitxor(bitxor(mul(get(&self, j, 0), 3), get(&self, j, 1)), get(&self, j, 2)), mul(get(&self, j, 3), 2)) in {
            
            set(&self, j, 0, s0);
            set(&self, j, 1, s1);
            set(&self, j, 2, s2);
            set(&self, j, 3, s3);
        };
        j = j + 1;
    };
    self
} in

proc inverse_mix_columns(self: State) -> State = {
    let j = 0 in while lt(j, 4) {
        let s0 = bitxor(bitxor(bitxor(mul(get(&self, j, 0), 14), mul(get(&self, j, 1), 11)), mul(get(&self, j, 2), 13)), mul(get(&self, j, 3), 9)),
            s1 = bitxor(bitxor(bitxor(mul(get(&self, j, 0), 9),  mul(get(&self, j, 1), 14)), mul(get(&self, j, 2), 11)), mul(get(&self, j, 3), 13)),
            s2 = bitxor(bitxor(bitxor(mul(get(&self, j, 0), 13), mul(get(&self, j, 1), 9)),  mul(get(&self, j, 2), 14)), mul(get(&self, j, 3), 11)),
            s3 = bitxor(bitxor(bitxor(mul(get(&self, j, 0), 11), mul(get(&self, j, 1), 13)), mul(get(&self, j, 2), 9)),  mul(get(&self, j, 3), 14)) in {
            
            set(&self, j, 0, s0);
            set(&self, j, 1, s1);
            set(&self, j, 2, s2);
            set(&self, j, 3, s3);
        };
        j = j + 1;
    };
    self
} in

proc sub_byte(byte: Int) -> Int = {
    let S_BOX = [[99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118], [202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192], [183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21], [4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117], [9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132], [83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207], [208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168], [81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210], [205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115], [96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219], [224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121], [231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8], [186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138], [112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158], [225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223], [140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22]] in {
        byte = bitand(byte, 255);
        let row = bitand(rsh(byte, 4), 15),
            col = bitand(byte, 15) in
            S_BOX[row][col]
    }
} in

proc inverse_sub_byte(byte: Int) -> Int = {
    let INVERSE_S_BOX = [[82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251], [124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203], [84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78], [8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37], [114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146], [108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132], [144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6], [208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107], [58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115], [150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110], [71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27], [252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244], [31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95], [96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239], [160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97], [23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125]] in {
        byte = bitand(byte, 255);
        let row = bitand(rsh(byte, 4), 15),
            col = bitand(byte, 15) in
            INVERSE_S_BOX[row][col]
    }
} in


proc sub_bytes(self: State) -> State = {
    let i = 0, j = 0 in {
        while lt(i, 4) {
            while lt(j, 4) {
                set(&self, j, i, sub_byte(get(&self, j, i)));
                j = j + 1;
            };
            j = 0;
            i = i + 1;
        };
    };
    self
} in

proc inverse_sub_bytes(self: State) -> State = {
    let i = 0, j = 0 in {
        while lt(i, 4) {
            while lt(j, 4) {
                set(&self, j, i, inverse_sub_byte(get(&self, j, i)));
                j = j + 1;
            };
            j = 0;
            i = i + 1;
        };
    };
    self
} in

type AESKeyType = enum {AES256, AES192, AES128} in
type AESKeyData = union {
    AES256: [Int * 32],
    AES192: [Int * 24],
    AES128: [Int * 16]
} in
type Key = struct {
    ty: AESKeyType,
    key: AESKeyData
} in

proc get_key_len(key: Key) -> Int = {
    if (eq(key.ty as Int, AES256 of AESKeyType as Int)) 8
    else (if (eq(key.ty as Int, AES192 of AESKeyType as Int)) 6
    else 4)
} in

proc get_key_rounds(key: Key) -> Int = {
    if (eq(key.ty as Int, AES256 of AESKeyType as Int)) 14
    else (if (eq(key.ty as Int, AES192 of AESKeyType as Int)) 12
    else 10)
} in

proc get_key_size(key: Key) -> Int = {
    if (eq(key.ty as Int, AES256 of AESKeyType as Int)) 32
    else (if (eq(key.ty as Int, AES192 of AESKeyType as Int)) 24
    else 16)
} in

proc get_key_data(key: &Key) -> &Int = {
    (&key->key) as &Int
} in

proc putkey(key: Key) -> None = {
    if (eq(key.ty as Int, AES256 of AESKeyType as Int)) {
        putchar('A');
        putchar('E');
        putchar('S');
        putchar('2');
        putchar('5');
        putchar('6');
    } else (if (eq(key.ty as Int, AES192 of AESKeyType as Int)) {
        putchar('A');
        putchar('E');
        putchar('S');
        putchar('1');
        putchar('9');
        putchar('2');
    } else  {
        putchar('A');
        putchar('E');
        putchar('S');
        putchar('1');
        putchar('2');
        putchar('8');
    });

    let i = 0, size = get_key_size(key), data = get_key_data(&key) in 
        while lt(i, size) {
            putchar(' ');
            putint(data[i]);
            i = i + 1;
        }
} in

proc sub_word(word: Int) -> Int = {
    let byte0 = sub_byte(bitand(rsh(word, 24), 255)),
        byte1 = sub_byte(bitand(rsh(word, 16), 255)),
        byte2 = sub_byte(bitand(rsh(word, 8), 255)),
        byte3 = sub_byte(bitand(word, 255)) in
        (lsh(byte0, 24) + lsh(byte1, 16) + lsh(byte2, 8) + byte3)
} in

proc rot_word(word: Int) -> Int = {
    let byte0 = bitand(rsh(word, 24), 255),
        byte1 = bitand(rsh(word, 16), 255),
        byte2 = bitand(rsh(word, 8), 255),
        byte3 = bitand(word, 255) in
        (lsh(byte1, 24) + lsh(byte2, 16) + lsh(byte3, 8) + byte0)
} in

proc word(byte3: Int, byte2: Int, byte1: Int, byte0: Int) -> Int = {
    (lsh(byte3, 24) + lsh(byte2, 16) + lsh(byte1, 8) + byte0)
} in

proc bytes(word: Int) -> [Int * 4] = {
    let byte0 = bitand(rsh(word, 24), 255),
        byte1 = bitand(rsh(word, 16), 255),
        byte2 = bitand(rsh(word, 8), 255),
        byte3 = bitand(word, 255) in
        [byte0, byte1, byte2, byte3]
} in

proc round_key(word0: Int, word1: Int, word2: Int, word3: Int) -> State = {
    let bytes0 = bytes(word0),
        bytes1 = bytes(word1),
        bytes2 = bytes(word2),
        bytes3 = bytes(word3) in
            col_major(bytes0[0], bytes1[0], bytes2[0], bytes3[0],
            bytes0[1], bytes1[1], bytes2[1], bytes3[1],
            bytes0[2], bytes1[2], bytes2[2], bytes3[2],
            bytes0[3], bytes1[3], bytes2[3], bytes3[3])
} in

const alloc = proc(size: Int) -> &Int = core {
    set A, 10000
    index SP, A, C
    push C
    add [SP - 1], [[SP]]
    lea [[SP]], [SP - 1]
    add [[SP]], [SP - 1]
    pop
} in

const free = proc(ptr: &Int) -> None = {} in

proc key_expansion(key: Key, nr: Int, nk: Int) -> &Int = {
    let key_data = get_key_data(&key),
        w: &Int = alloc(4 * (nr + 1) * sizeof(Int)),
        i = 0 in {
        while lt(i, nk) {
            (w[i]) = word(
                key_data[4 * i],
                key_data[4 * i + 1],
                key_data[4 * i + 2],
                key_data[4 * i + 3],
            );
            i = i + 1;
        };

        i = nk;
        let rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54] in {
            while lt(i, 4 * (nr + 1)) {
                let tmp = w[i - 1] in {
                    if (eq(i % nk, 0)) {
                        tmp = bitxor(sub_word(rot_word(tmp)), word(rcon[i / nk - 1], 0, 0, 0));
                    } else {
                        if (and(eq(nk, 8), eq(i % nk, 4))) {
                            tmp = sub_word(tmp);
                        }
                    };
                    w[i] = bitxor(w[i - nk], tmp);
                };
                i = i + 1;
            }
        };
        w
    }
} in

proc aes_256_key(key: [Int * 32]) -> Key = {
    struct {
        ty = AES256 of AESKeyType,
        key = union {
            AES256 = key,
            AESKeyData..
        }
    }
} in

proc aes_192_key(key: [Int * 24]) -> Key = {
    struct {
        ty = AES192 of AESKeyType,
        key = union {
            AES192 = key,
            AESKeyData..
        }
    }
} in

proc aes_128_key(key: [Int * 16]) -> Key = {
    struct {
        ty = AES128 of AESKeyType,
        key = union {
            AES128 = key,
            AESKeyData..
        }
    }
} in

proc cipher(self: State, key: Key) -> State = {
    let result = self,
        i = 4,
        len = get_key_len(key),
        rounds = get_key_rounds(key),
        k = key_expansion(key, rounds, len)
        in {

        result = add_round_key(result, round_key(k[0], k[1], k[2], k[3]));
        while lt(i, 4 * (rounds + 1)) {
            let rk = round_key(k[i], k[i + 1], k[i + 2], k[i + 3]) in {
                result = shift_rows(sub_bytes(result));
                if (neq(i / 4, rounds)) {
                    result = mix_columns(result);
                };
                result = add_round_key(result, rk);
            };
            i = i + 4;
        };
        free(k);
        result
    }
} in

proc inverse_cipher(self: State, key: Key) -> State = {
    let result = self,
        len = get_key_len(key),
        rounds = get_key_rounds(key),
        i = 4 * rounds,
        k = key_expansion(key, rounds, len)
        in {

        while gt(i, 0) {
            let rk = round_key(k[i], k[i + 1], k[i + 2], k[i + 3]) in {
                result = add_round_key(result, rk);
                if (neq(i / 4, rounds)) {
                    result = inverse_mix_columns(result);
                };
                result = inverse_sub_bytes(inverse_shift_rows(result));
            };
            i = i - 4;
        };
        result = add_round_key(result, round_key(k[0], k[1], k[2], k[3]));
        free(k);
        result
    }
} in

proc between(lower: Int, n: Int, upper: Int) -> Bool = {
    if (lt(n, lower)) {
        return false
    };

    if (gt(n, upper)) {
        return false
    };

    true
} in

proc gethexdigit() -> Int = {
    let digit = getchar() as Int in
        if (between(48, digit, 57)) {
            digit - 48
        } else (if (between(65, digit, 70)) {
            digit - 55
        } else (if (between(97, digit, 102)) {
            digit - 87
        } else {
            0
        }))
} in

proc getbyte() -> Int = {
    gethexdigit() * 16 + gethexdigit()
} in

let state = row_major(
    getbyte(), getbyte(), getbyte(), getbyte(),
    getbyte(), getbyte(), getbyte(), getbyte(),
    getbyte(), getbyte(), getbyte(), getbyte(),
    getbyte(), getbyte(), getbyte(), getbyte(),
) in {
    let key = aes_128_key([
        0, 1, 2, 3, 4, 5, 6, 7,
        8, 9, 10, 11, 12, 13, 14, 15,
    ]) in {
        putchar('k');
        putchar('e');
        putchar('y');
        putchar(':');
        putchar(' ');
        putchar('\n');
        putkey(key);
        putchar('\n');

        putchar('i');
        putchar('n');
        putchar('p');
        putchar('u');
        putchar('t');
        putchar(':');
        putchar('\n');
        putstate(state);

        state = cipher(state, key);
        putchar('o');
        putchar('u');
        putchar('t');
        putchar('p');
        putchar('u');
        putchar('t');
        putchar(':');
        putchar('\n');
        putstate(state);
        state = inverse_cipher(state, key);

        putchar('i');
        putchar('n');
        putchar('v');
        putchar('e');
        putchar('r');
        putchar('s');
        putchar('e');
        putchar(':');
        putchar('\n');
        putstate(state);
    };
}