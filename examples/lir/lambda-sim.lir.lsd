const putint = proc(n: Int) -> None = std {
    put-int [SP]
    pop
} in
const putchar = proc(ch: Char) -> None = std {
    put-char [SP]
    pop
} in
const lt = proc(a: Int, b: Int) -> Bool = core {
    lt [SP - 1], [SP], A pop
    mov A, [SP]
} in
const put = proc(n: Int) -> None = core {
    put [SP]
    pop
} in

type Op = struct {
    apply: proc(struct {x: Int}, Int) -> Int,
    state: struct {x: Int}
} in

proc mul(n: Int) -> Op = {
    struct {
        apply = proc(state: struct{x: Int}, y: Int) -> Int = {
            state.x * y
        },
        state = struct {x=n}
    }
} in

proc add(n: Int) -> Op = {
    struct {
        apply = proc(state: struct{x: Int}, y: Int) -> Int = {
            state.x + y
        },
        state = struct {x=n}
    }
} in

proc app(op: Op, y: Int) -> Int = {
    op.apply(op.state, y)
} in

proc putdec(n: Int) -> None = {
    if (lt(n, 10)) {
        put(n + 48)
    } else {
        putdec(n / 10);
        put(n % 10 + 48)
    }
} in

proc puthex(n: Int, lower: Bool) -> None = {
    if (lt(n, 16)) {
        put(n + if (lt(n, 10)) {
            48
        } else {
            if lower {
                87
            } else {
                55
            }
        })
    } else {
        puthex(n / 16, lower);
        puthex(n % 16, lower)
    }
} in

proc putbyte(n: Int, lower: Bool) -> None = {
    puthex(n / 16, lower);
    puthex(n % 16, lower)
} in

proc ln() -> None = {
    put(10)
} in

let double = mul(2),
    triple = mul(3) in {
    putdec(
        app(add(10), app(triple, app(double, 5)))
    );
    ln();

    putbyte(255, false);
}